// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`babel async-generators.js 1`] = `
Object {
  "input": "// https://babeljs.io/docs/en/babel-plugin-proposal-async-generator-functions

async function* agf() {
  await 1;
  yield 2;
}
",
  "plugins": "[
  [
    [
      \\"doExpressions\\",
      {}
    ]
  ],
  [
    [
      \\"doExpressions\\",
      {}
    ],
    [
      \\"flow\\",
      {}
    ]
  ]
]",
}
`;

exports[`babel bigint.js 1`] = `
Object {
  "input": "// https://github.com/tc39/proposal-bigint

const previousMaxSafe = BigInt(Number.MAX_SAFE_INTEGER);
// ↪ 9007199254740991

const maxPlusOne = previousMaxSafe + 1n;
// ↪ 9007199254740992n

const theFuture = previousMaxSafe + 2n;
// ↪ 9007199254740993n, this works now!

const multi = previousMaxSafe * 2n;
// ↪ 18014398509481982n

// \`–\` is not minus sign,
// SIC https://github.com/tc39/proposal-bigint#operators
// const subtr = multi – 10n;
// ↪ 18014398509481972n

const mod = multi % 10n;
// ↪ 2n

const bigN = 2n ** 54n;
// ↪ 18014398509481984n

bigN * -1n
// ↪ –18014398509481984n

0n === 0
// ↪ false

0n == 0
// ↪ true

1n < 2
// ↪ true

2n > 1
// ↪ true

2 > 2
// ↪ false

2n > 2
// ↪ false

2n >= 2
// ↪ true

const mixed = [4n, 6, -12n, 10, 4, 0, 0n];
// ↪  [4n, 6, -12n, 10, 4, 0, 0n]

mixed.sort();
// ↪ [-12n, 0, 0n, 10, 4n, 4, 6]

if (0n) {
  console.log('Hello from the if!');
} else {
  console.log('Hello from the else!');
}

// ↪ \\"Hello from the else!\\"

0n || 12n
// ↪ 12n

0n && 12n
// ↪ 0n

Boolean(0n)
// ↪ false

Boolean(12n)
// ↪ true

!12n
// ↪ false

!0n
// ↪ true

const view = new BigInt64Array(4);
// ↪ [0n, 0n, 0n, 0n]
view.length;
// ↪ 4
view[0];
// ↪ 0n
view[0] = 42n;
view[0];
// ↪ 42n

// Highest possible BigInt value that can be represented as a
// signed 64-bit integer.
const max = 2n ** (64n - 1n) - 1n;
view[0] = max;
view[0];
// ↪ 9_223_372_036_854_775_807n
view[0] = max + 1n;
view[0];
// ↪ -9_223_372_036_854_775_808n
//   ^ negative because of overflow

1n + 2
// ↪ TypeError: Cannot mix BigInt and other types, use explicit conversions

1n * 2
// ↪ TypeError: Cannot mix BigInt and other types, use explicit conversions

+1n
// ↪ TypeError: Cannot convert a BigInt value to a number

Number(1n)
// ↪ 1

1n + '2'
// ↪ \\"12\\"

'2' + 1n
// ↪ \\"21\\"

const badPrecision = BigInt(9007199254740993);
// ↪9007199254740992n

const goodPrecision = BigInt('9007199254740993');
// ↪9007199254740993n

const alsoGoodPrecision = 9007199254740993n;
// ↪9007199254740993n
",
  "plugins": "[
  [
    [
      \\"functionSent\\",
      {}
    ],
    [
      \\"numericSeparator\\",
      {}
    ],
    [
      \\"classPrivateProperties\\",
      {}
    ],
    [
      \\"classPrivateMethods\\",
      {}
    ],
    [
      \\"v8intrinsic\\",
      {}
    ],
    [
      \\"privateIn\\",
      {}
    ]
  ],
  [
    [
      \\"functionSent\\",
      {}
    ],
    [
      \\"numericSeparator\\",
      {}
    ],
    [
      \\"classPrivateProperties\\",
      {}
    ],
    [
      \\"classPrivateMethods\\",
      {}
    ],
    [
      \\"v8intrinsic\\",
      {}
    ],
    [
      \\"privateIn\\",
      {}
    ],
    [
      \\"flow\\",
      {}
    ]
  ]
]",
}
`;

exports[`babel class-properties.js 1`] = `
Object {
  "input": "// https://babeljs.io/docs/en/babel-plugin-proposal-class-properties

class Bork {
    //Property initializer syntax
    instanceProperty = \\"bork\\";
    boundFunction = () => {
      return this.instanceProperty;
    };

    //Static class properties
    static staticProperty = \\"babelIsCool\\";
    static staticFunction = function() {
      return Bork.staticProperty;
    };
  }

  let myBork = new Bork;

  //Property initializers are not on the prototype.
  console.log(myBork.__proto__.boundFunction); // > undefined

  //Bound functions are bound to the class instance.
  console.log(myBork.boundFunction.call(undefined)); // > \\"bork\\"

  //Static function exists on the class.
  console.log(Bork.staticFunction()); // > \\"babelIsCool\\"
",
  "plugins": "[
  [
    [
      \\"doExpressions\\",
      {}
    ],
    [
      \\"classProperties\\",
      {}
    ]
  ],
  [
    [
      \\"doExpressions\\",
      {}
    ],
    [
      \\"classProperties\\",
      {}
    ],
    [
      \\"flow\\",
      {}
    ]
  ]
]",
}
`;

exports[`babel decorators.js 1`] = `
Object {
  "input": "// https://babeljs.io/docs/en/babel-plugin-proposal-decorators

@annotation
class MyClass { }

function annotation(target) {
   target.annotated = true;
}

@isTestable(true)
class MyClass { }

function isTestable(value) {
   return function decorator(target) {
      target.isTestable = value;
   }
}

class C {
  @enumerable(false)
  method() { }
}

function enumerable(value) {
  return function (target, key, descriptor) {
     descriptor.enumerable = value;
     return descriptor;
  }
}
",
  "plugins": "[
  [
    [
      \\"doExpressions\\",
      {}
    ],
    [
      \\"classProperties\\",
      {}
    ],
    [
      \\"decorators\\",
      {
        \\"decoratorsBeforeExport\\": false
      }
    ]
  ],
  [
    [
      \\"doExpressions\\",
      {}
    ],
    [
      \\"classProperties\\",
      {}
    ],
    [
      \\"decorators\\",
      {
        \\"decoratorsBeforeExport\\": false
      }
    ],
    [
      \\"flow\\",
      {}
    ]
  ]
]",
}
`;

exports[`babel do-expressions.js 1`] = `
Object {
  "input": "// https://babeljs.io/docs/en/babel-plugin-proposal-do-expressions

let a = do {
  if(x > 10) {
    'big';
  } else {
    'small';
  }
};
// is equivalent to:
let a = x > 10 ? 'big' : 'small';
",
  "plugins": "[
  [
    [
      \\"doExpressions\\",
      {}
    ],
    [
      \\"partialApplication\\",
      {}
    ]
  ],
  [
    [
      \\"doExpressions\\",
      {}
    ],
    [
      \\"partialApplication\\",
      {}
    ],
    [
      \\"flow\\",
      {}
    ]
  ]
]",
}
`;

exports[`babel dynamic-import.js 1`] = `
Object {
  "input": "// https://babeljs.io/docs/en/babel-plugin-syntax-dynamic-import

// There is no example code on babel website

import('./prettier.mjs');
import(prettier);
import('./prettier.mjs').then(module => console.log(module));
import(prettier).then(module => console.log(module));
",
  "plugins": "[
  [
    [
      \\"doExpressions\\",
      {}
    ],
    [
      \\"moduleAttributes\\",
      {
        \\"version\\": \\"may-2020\\"
      }
    ]
  ],
  [
    [
      \\"doExpressions\\",
      {}
    ],
    [
      \\"moduleAttributes\\",
      {
        \\"version\\": \\"may-2020\\"
      }
    ],
    [
      \\"flow\\",
      {}
    ]
  ]
]",
}
`;

exports[`babel export-default-from.js 1`] = `
Object {
  "input": "// https://babeljs.io/docs/en/babel-plugin-proposal-export-default-from


export v from 'mod';
",
  "plugins": "[
  [
    [
      \\"doExpressions\\",
      {}
    ],
    [
      \\"exportDefaultFrom\\",
      {}
    ]
  ],
  [
    [
      \\"doExpressions\\",
      {}
    ],
    [
      \\"exportDefaultFrom\\",
      {}
    ],
    [
      \\"flow\\",
      {}
    ]
  ]
]",
}
`;

exports[`babel export-namespace-from.js 1`] = `
Object {
  "input": "// https://babeljs.io/docs/en/babel-plugin-proposal-export-namespace-from

export * as ns from 'mod';
",
  "plugins": "[
  [
    [
      \\"doExpressions\\",
      {}
    ],
    [
      \\"exportDefaultFrom\\",
      {}
    ]
  ],
  [
    [
      \\"doExpressions\\",
      {}
    ],
    [
      \\"exportDefaultFrom\\",
      {}
    ],
    [
      \\"flow\\",
      {}
    ]
  ]
]",
}
`;

exports[`babel flow.js 1`] = `
Object {
  "input": "// https://babeljs.io/docs/en/babel-preset-flow

function foo(one: any, two: number, three?): string {}
",
  "plugins": "[
  [
    [
      \\"doExpressions\\",
      {}
    ],
    [
      \\"partialApplication\\",
      {}
    ]
  ],
  [
    [
      \\"doExpressions\\",
      {}
    ],
    [
      \\"partialApplication\\",
      {}
    ],
    [
      \\"flow\\",
      {}
    ]
  ]
]",
}
`;

exports[`babel function-bind.js 1`] = `
Object {
  "input": "// https://babeljs.io/docs/en/babel-plugin-proposal-function-bind

obj::func
// is equivalent to:
func.bind(obj)

::obj.func
// is equivalent to:
obj.func.bind(obj)

obj::func(val)
// is equivalent to:
func.call(obj, val)

::obj.func(val)
// is equivalent to:
obj.func.call(obj, val)
",
  "plugins": "[
  [
    [
      \\"doExpressions\\",
      {}
    ],
    [
      \\"functionBind\\",
      {}
    ]
  ],
  [
    [
      \\"doExpressions\\",
      {}
    ],
    [
      \\"functionBind\\",
      {}
    ],
    [
      \\"flow\\",
      {}
    ]
  ]
]",
}
`;

exports[`babel function-sent.js 1`] = `
Object {
  "input": "// https://babeljs.io/docs/en/babel-plugin-proposal-function-sent

function* generator() {
    console.log(\\"Sent\\", function.sent);
    console.log(\\"Yield\\", yield);
}

const iterator = generator();
iterator.next(1); // Logs \\"Sent 1\\"
iterator.next(2); // Logs \\"Yield 2\\"
",
  "plugins": "[
  [
    [
      \\"doExpressions\\",
      {}
    ],
    [
      \\"functionSent\\",
      {}
    ]
  ],
  [
    [
      \\"doExpressions\\",
      {}
    ],
    [
      \\"functionSent\\",
      {}
    ],
    [
      \\"flow\\",
      {}
    ]
  ]
]",
}
`;

exports[`babel import-meta.js 1`] = `
Object {
  "input": "// https://babeljs.io/docs/en/babel-plugin-syntax-import-meta

// Enabled by default https://github.com/babel/babel/pull/11406

// from https://github.com/tc39/proposal-import-meta

(async () => {
  const response = await fetch(new URL(\\"../hamsters.jpg\\", import.meta.url));
  const blob = await response.blob();

  const size = import.meta.scriptElement.dataset.size || 300;

  const image = new Image();
  image.src = URL.createObjectURL(blob);
  image.width = image.height = size;

  document.body.appendChild(image);
})();
",
  "plugins": "[
  [
    [
      \\"doExpressions\\",
      {}
    ],
    [
      \\"moduleAttributes\\",
      {
        \\"version\\": \\"may-2020\\"
      }
    ]
  ],
  [
    [
      \\"doExpressions\\",
      {}
    ],
    [
      \\"moduleAttributes\\",
      {
        \\"version\\": \\"may-2020\\"
      }
    ],
    [
      \\"flow\\",
      {}
    ]
  ]
]",
}
`;

exports[`babel jsx.js 1`] = `
Object {
  "input": "// https://babeljs.io/docs/en/babel-plugin-syntax-jsx

var profile = <div>
  <img src=\\"avatar.png\\" className=\\"profile\\" />
  <h3>{[user.firstName, user.lastName].join(' ')}</h3>
</div>;
",
  "plugins": "[
  [
    [
      \\"doExpressions\\",
      {}
    ],
    [
      \\"classProperties\\",
      {}
    ],
    [
      \\"jsx\\",
      {}
    ]
  ],
  [
    [
      \\"doExpressions\\",
      {}
    ],
    [
      \\"classProperties\\",
      {}
    ],
    [
      \\"jsx\\",
      {}
    ],
    [
      \\"flow\\",
      {}
    ]
  ]
]",
}
`;

exports[`babel logical-assignment-operators.js 1`] = `
Object {
  "input": "// https://babeljs.io/docs/en/babel-plugin-proposal-logical-assignment-operators

a ||= b;
obj.a.b ||= c;

a &&= b;
obj.a.b &&= c;
",
  "plugins": "[
  [
    [
      \\"doExpressions\\",
      {}
    ],
    [
      \\"logicalAssignment\\",
      {}
    ]
  ],
  [
    [
      \\"doExpressions\\",
      {}
    ],
    [
      \\"logicalAssignment\\",
      {}
    ],
    [
      \\"flow\\",
      {}
    ]
  ]
]",
}
`;

exports[`babel module-attributes-dynamic.js 1`] = `
Object {
  "input": "import(\\"foo.json\\", { with: { type: \\"json\\" } })
",
  "plugins": "[
  [
    [
      \\"moduleAttributes\\",
      {
        \\"version\\": \\"may-2020\\"
      }
    ]
  ],
  [
    [
      \\"moduleAttributes\\",
      {
        \\"version\\": \\"may-2020\\"
      }
    ],
    [
      \\"flow\\",
      {}
    ]
  ]
]",
}
`;

exports[`babel module-attributes-static.js 1`] = `
Object {
  "input": "import foo from \\"foo.json\\" with type: \\"json\\";
",
  "plugins": "[
  [
    [
      \\"moduleAttributes\\",
      {
        \\"version\\": \\"may-2020\\"
      }
    ]
  ],
  [
    [
      \\"moduleAttributes\\",
      {
        \\"version\\": \\"may-2020\\"
      }
    ],
    [
      \\"flow\\",
      {}
    ]
  ]
]",
}
`;

exports[`babel nullish-coalescing-operator.js 1`] = `
Object {
  "input": "// https://babeljs.io/docs/en/babel-plugin-proposal-nullish-coalescing-operator

var foo = object.foo ?? \\"default\\";
",
  "plugins": "[
  [
    [
      \\"doExpressions\\",
      {}
    ],
    [
      \\"partialApplication\\",
      {}
    ]
  ],
  [
    [
      \\"doExpressions\\",
      {}
    ],
    [
      \\"partialApplication\\",
      {}
    ],
    [
      \\"flow\\",
      {}
    ]
  ]
]",
}
`;

exports[`babel numeric-separator.js 1`] = `
Object {
  "input": "// https://babeljs.io/docs/en/babel-plugin-proposal-numeric-separator

let budget = 1_000_000_000_000;

// What is the value of \`budget\`? It's 1 trillion!
//
// Let's confirm:
console.log(budget === 10 ** 12); // true

let nibbles = 0b1010_0001_1000_0101;

// Is bit 7 on? It sure is!
// 0b1010_0001_1000_0101
//             ^
//
// We can double check:
console.log(!!(nibbles & (1 << 7))); // true

// Messages are sent as 24 bit values, but should be
// treated as 3 distinct bytes:
let message = 0xa0_b0_c0;

// What's the value of the upper most byte? It's A0, or 160.
// We can confirm that:
let a = (message >> 16) & 0xff;
console.log(a.toString(16), a); // a0, 160

// What's the value of the middle byte? It's B0, or 176.
// Let's just make sure...
let b = (message >> 8) & 0xff;
console.log(b.toString(16), b); // b0, 176

// What's the value of the lower most byte? It's C0, or 192.
// Again, let's prove that:
let c = message & 0xff;
console.log(c.toString(16), b); // c0, 192
",
  "plugins": "[
  [
    [
      \\"doExpressions\\",
      {}
    ],
    [
      \\"functionSent\\",
      {}
    ],
    [
      \\"numericSeparator\\",
      {}
    ],
    [
      \\"partialApplication\\",
      {}
    ]
  ],
  [
    [
      \\"doExpressions\\",
      {}
    ],
    [
      \\"functionSent\\",
      {}
    ],
    [
      \\"numericSeparator\\",
      {}
    ],
    [
      \\"partialApplication\\",
      {}
    ],
    [
      \\"flow\\",
      {}
    ]
  ]
]",
}
`;

exports[`babel object-rest-spread.js 1`] = `
Object {
  "input": "// https://babeljs.io/docs/en/babel-plugin-transform-object-rest-spread

let { x, y, ...z } = { x: 1, y: 2, a: 3, b: 4 };
console.log(x); // 1
console.log(y); // 2
console.log(z); // { a: 3, b: 4 }

let n = { x, y, ...z };
console.log(n); // { x: 1, y: 2, a: 3, b: 4 }
",
  "plugins": "[
  [
    [
      \\"doExpressions\\",
      {}
    ]
  ],
  [
    [
      \\"doExpressions\\",
      {}
    ],
    [
      \\"flow\\",
      {}
    ]
  ]
]",
}
`;

exports[`babel optional-catch-binding.js 1`] = `
Object {
  "input": "// https://babeljs.io/docs/en/babel-plugin-proposal-optional-catch-binding

try {
  throw 0;
} catch {
  doSomethingWhichDoesNotCareAboutTheValueThrown();
}

try {
  throw 0;
} catch {
  doSomethingWhichDoesNotCareAboutTheValueThrown();
} finally {
  doSomeCleanup();
}
",
  "plugins": "[
  [
    [
      \\"doExpressions\\",
      {}
    ],
    [
      \\"throwExpressions\\",
      {}
    ]
  ],
  [
    [
      \\"doExpressions\\",
      {}
    ],
    [
      \\"throwExpressions\\",
      {}
    ],
    [
      \\"flow\\",
      {}
    ]
  ]
]",
}
`;

exports[`babel optional-chaining.js 1`] = `
Object {
  "input": "// https://babeljs.io/docs/en/babel-plugin-proposal-optional-chaining

const obj = {
  foo: {
    bar: {
      baz: 42,
    },
  },
};

const baz = obj?.foo?.bar?.baz; // 42

const safe = obj?.qux?.baz; // undefined

// Optional chaining and normal chaining can be intermixed
obj?.foo.bar?.baz; // Only access \`foo\` if \`obj\` exists, and \`baz\` if
                   // \`bar\` exists

// Example usage with bracket notation:
obj?.['foo']?.bar?.baz // 42

const obj = {
  foo: {
    bar: {
      baz() {
        return 42;
      },
    },
  },
};

const baz = obj?.foo?.bar?.baz(); // 42

const safe = obj?.qux?.baz(); // undefined
const safe2 = obj?.foo.bar.qux?.(); // undefined

const willThrow = obj?.foo.bar.qux(); // Error: not a function

// Top function can be called directly, too.
function test() {
  return 42;
}
test?.(); // 42

exists?.(); // undefined

const obj = {
  foo: {
    bar: {
      baz: class {
      },
    },
  },
};

const baz = new obj?.foo?.bar?.baz(); // baz instance

const safe = new obj?.qux?.baz(); // undefined
const safe2 = new obj?.foo.bar.qux?.(); // undefined

const willThrow = new obj?.foo.bar.qux(); // Error: not a constructor

// Top classes can be called directly, too.
class Test {
}
new Test?.(); // test instance

new exists?.(); // undefined

const obj = {
  foo: {
    bar: {}
  },
};

const ret = delete obj?.foo?.bar?.baz; // true
",
  "plugins": "[
  [
    [
      \\"doExpressions\\",
      {}
    ],
    [
      \\"classProperties\\",
      {}
    ],
    [
      \\"partialApplication\\",
      {}
    ]
  ],
  [
    [
      \\"doExpressions\\",
      {}
    ],
    [
      \\"classProperties\\",
      {}
    ],
    [
      \\"partialApplication\\",
      {}
    ],
    [
      \\"flow\\",
      {}
    ]
  ]
]",
}
`;

exports[`babel partial-application.js 1`] = `
Object {
  "input": "// https://babeljs.io/docs/en/babel-plugin-proposal-partial-application

function add(x, y) { return x + y; }

const addOne = add(1, ?); // apply from the left
addOne(2); // 3

const addTen = add(?, 10); // apply from the right
addTen(2); // 12

let newScore = player.score
  |> add(7, ?)
  |> clamp(0, 100, ?); // shallow stack, the pipe to \`clamp\` is the same frame as the pipe to \`add\`.

f(x, ?)           // partial application from left
f(?, x)           // partial application from right
f(?, x, ?)        // partial application for any arg
o.f(x, ?)         // partial application from left
o.f(?, x)         // partial application from right
o.f(?, x, ?)      // partial application for any arg
super.f(?)        // partial application allowed for call on |SuperProperty|
",
  "plugins": "[
  [
    [
      \\"doExpressions\\",
      {}
    ],
    [
      \\"partialApplication\\",
      {}
    ],
    [
      \\"pipelineOperator\\",
      {
        \\"proposal\\": \\"smart\\"
      }
    ]
  ],
  [
    [
      \\"doExpressions\\",
      {}
    ],
    [
      \\"partialApplication\\",
      {}
    ],
    [
      \\"pipelineOperator\\",
      {
        \\"proposal\\": \\"smart\\"
      }
    ],
    [
      \\"flow\\",
      {}
    ]
  ],
  [
    [
      \\"doExpressions\\",
      {}
    ],
    [
      \\"partialApplication\\",
      {}
    ],
    [
      \\"pipelineOperator\\",
      {
        \\"proposal\\": \\"minimal\\"
      }
    ]
  ],
  [
    [
      \\"doExpressions\\",
      {}
    ],
    [
      \\"partialApplication\\",
      {}
    ],
    [
      \\"pipelineOperator\\",
      {
        \\"proposal\\": \\"minimal\\"
      }
    ],
    [
      \\"flow\\",
      {}
    ]
  ],
  [
    [
      \\"doExpressions\\",
      {}
    ],
    [
      \\"partialApplication\\",
      {}
    ],
    [
      \\"pipelineOperator\\",
      {
        \\"proposal\\": \\"fsharp\\"
      }
    ]
  ],
  [
    [
      \\"doExpressions\\",
      {}
    ],
    [
      \\"partialApplication\\",
      {}
    ],
    [
      \\"pipelineOperator\\",
      {
        \\"proposal\\": \\"fsharp\\"
      }
    ],
    [
      \\"flow\\",
      {}
    ]
  ]
]",
}
`;

exports[`babel pipeline-operator-fsharp.js 1`] = `
Object {
  "input": "// https://babeljs.io/docs/en/babel-plugin-proposal-pipeline-operator
// https://github.com/valtech-nyc/proposal-fsharp-pipelines

promise
  |> await
  |> x => doubleSay(x, ', ')
  |> capitalize
  |> x => x + '!'
  |> x => new User.Message(x)
  |> x => stream.write(x)
  |> await
  |> console.log;

const result = exclaim(capitalize(doubleSay(\\"hello\\")));
result //=> \\"Hello, hello!\\"

const result = \\"hello\\"
  |> doubleSay
  |> capitalize
  |> exclaim;

result //=> \\"Hello, hello!\\"

const person = { score: 25 };

const newScore = person.score
  |> double
  |> n => add(7, n)
  |> n => boundScore(0, 100, n);

newScore //=> 57

// As opposed to:
let newScore = boundScore(0, 100, add(7, double(person.score)));
",
  "plugins": "[
  [
    [
      \\"doExpressions\\",
      {}
    ],
    [
      \\"pipelineOperator\\",
      {
        \\"proposal\\": \\"smart\\"
      }
    ]
  ],
  [
    [
      \\"doExpressions\\",
      {}
    ],
    [
      \\"pipelineOperator\\",
      {
        \\"proposal\\": \\"smart\\"
      }
    ],
    [
      \\"flow\\",
      {}
    ]
  ],
  [
    [
      \\"doExpressions\\",
      {}
    ],
    [
      \\"pipelineOperator\\",
      {
        \\"proposal\\": \\"minimal\\"
      }
    ]
  ],
  [
    [
      \\"doExpressions\\",
      {}
    ],
    [
      \\"pipelineOperator\\",
      {
        \\"proposal\\": \\"minimal\\"
      }
    ],
    [
      \\"flow\\",
      {}
    ]
  ],
  [
    [
      \\"doExpressions\\",
      {}
    ],
    [
      \\"pipelineOperator\\",
      {
        \\"proposal\\": \\"fsharp\\"
      }
    ]
  ],
  [
    [
      \\"doExpressions\\",
      {}
    ],
    [
      \\"pipelineOperator\\",
      {
        \\"proposal\\": \\"fsharp\\"
      }
    ],
    [
      \\"flow\\",
      {}
    ]
  ]
]",
}
`;

exports[`babel pipeline-operator-minimal.js 1`] = `
Object {
  "input": "// https://babeljs.io/docs/en/babel-plugin-proposal-pipeline-operator
// https://github.com/tc39/proposal-pipeline-operator/

let result = exclaim(capitalize(doubleSay(\\"hello\\")));
result //=> \\"Hello, hello!\\"

let result = \\"hello\\"
  |> doubleSay
  |> capitalize
  |> exclaim;

result //=> \\"Hello, hello!\\"
",
  "plugins": "[
  [
    [
      \\"doExpressions\\",
      {}
    ],
    [
      \\"pipelineOperator\\",
      {
        \\"proposal\\": \\"smart\\"
      }
    ]
  ],
  [
    [
      \\"doExpressions\\",
      {}
    ],
    [
      \\"pipelineOperator\\",
      {
        \\"proposal\\": \\"smart\\"
      }
    ],
    [
      \\"flow\\",
      {}
    ]
  ],
  [
    [
      \\"doExpressions\\",
      {}
    ],
    [
      \\"pipelineOperator\\",
      {
        \\"proposal\\": \\"minimal\\"
      }
    ]
  ],
  [
    [
      \\"doExpressions\\",
      {}
    ],
    [
      \\"pipelineOperator\\",
      {
        \\"proposal\\": \\"minimal\\"
      }
    ],
    [
      \\"flow\\",
      {}
    ]
  ],
  [
    [
      \\"doExpressions\\",
      {}
    ],
    [
      \\"pipelineOperator\\",
      {
        \\"proposal\\": \\"fsharp\\"
      }
    ]
  ],
  [
    [
      \\"doExpressions\\",
      {}
    ],
    [
      \\"pipelineOperator\\",
      {
        \\"proposal\\": \\"fsharp\\"
      }
    ],
    [
      \\"flow\\",
      {}
    ]
  ]
]",
}
`;

exports[`babel pipeline-operator-smart.js 1`] = `
Object {
  "input": "// https://babeljs.io/docs/en/babel-plugin-proposal-pipeline-operator
// https://github.com/js-choi/proposal-smart-pipelines

value
|> await #
|> doubleSay(#, ', ')
|> capitalize // This is a function call.
|> # + '!'
|> new User.Message(#)
|> await #
|> console.log; // This is a method call.

// (The # token isn't final; it might instead be @ or ? or %.)
",
  "plugins": "[
  [
    [
      \\"doExpressions\\",
      {}
    ],
    [
      \\"classPrivateProperties\\",
      {}
    ],
    [
      \\"classPrivateMethods\\",
      {}
    ],
    [
      \\"v8intrinsic\\",
      {}
    ],
    [
      \\"partialApplication\\",
      {}
    ],
    [
      \\"decorators\\",
      {
        \\"decoratorsBeforeExport\\": false
      }
    ],
    [
      \\"privateIn\\",
      {}
    ],
    [
      \\"pipelineOperator\\",
      {
        \\"proposal\\": \\"smart\\"
      }
    ]
  ],
  [
    [
      \\"doExpressions\\",
      {}
    ],
    [
      \\"classPrivateProperties\\",
      {}
    ],
    [
      \\"classPrivateMethods\\",
      {}
    ],
    [
      \\"v8intrinsic\\",
      {}
    ],
    [
      \\"partialApplication\\",
      {}
    ],
    [
      \\"decorators\\",
      {
        \\"decoratorsBeforeExport\\": false
      }
    ],
    [
      \\"privateIn\\",
      {}
    ],
    [
      \\"pipelineOperator\\",
      {
        \\"proposal\\": \\"smart\\"
      }
    ],
    [
      \\"flow\\",
      {}
    ]
  ],
  [
    [
      \\"doExpressions\\",
      {}
    ],
    [
      \\"classPrivateProperties\\",
      {}
    ],
    [
      \\"classPrivateMethods\\",
      {}
    ],
    [
      \\"v8intrinsic\\",
      {}
    ],
    [
      \\"partialApplication\\",
      {}
    ],
    [
      \\"decorators\\",
      {
        \\"decoratorsBeforeExport\\": false
      }
    ],
    [
      \\"privateIn\\",
      {}
    ],
    [
      \\"pipelineOperator\\",
      {
        \\"proposal\\": \\"minimal\\"
      }
    ]
  ],
  [
    [
      \\"doExpressions\\",
      {}
    ],
    [
      \\"classPrivateProperties\\",
      {}
    ],
    [
      \\"classPrivateMethods\\",
      {}
    ],
    [
      \\"v8intrinsic\\",
      {}
    ],
    [
      \\"partialApplication\\",
      {}
    ],
    [
      \\"decorators\\",
      {
        \\"decoratorsBeforeExport\\": false
      }
    ],
    [
      \\"privateIn\\",
      {}
    ],
    [
      \\"pipelineOperator\\",
      {
        \\"proposal\\": \\"minimal\\"
      }
    ],
    [
      \\"flow\\",
      {}
    ]
  ],
  [
    [
      \\"doExpressions\\",
      {}
    ],
    [
      \\"classPrivateProperties\\",
      {}
    ],
    [
      \\"classPrivateMethods\\",
      {}
    ],
    [
      \\"v8intrinsic\\",
      {}
    ],
    [
      \\"partialApplication\\",
      {}
    ],
    [
      \\"decorators\\",
      {
        \\"decoratorsBeforeExport\\": false
      }
    ],
    [
      \\"privateIn\\",
      {}
    ],
    [
      \\"pipelineOperator\\",
      {
        \\"proposal\\": \\"fsharp\\"
      }
    ]
  ],
  [
    [
      \\"doExpressions\\",
      {}
    ],
    [
      \\"classPrivateProperties\\",
      {}
    ],
    [
      \\"classPrivateMethods\\",
      {}
    ],
    [
      \\"v8intrinsic\\",
      {}
    ],
    [
      \\"partialApplication\\",
      {}
    ],
    [
      \\"decorators\\",
      {
        \\"decoratorsBeforeExport\\": false
      }
    ],
    [
      \\"privateIn\\",
      {}
    ],
    [
      \\"pipelineOperator\\",
      {
        \\"proposal\\": \\"fsharp\\"
      }
    ],
    [
      \\"flow\\",
      {}
    ]
  ]
]",
}
`;

exports[`babel private-fields-in-in.js 1`] = `
Object {
  "input": "// https://github.com/tc39/proposal-private-fields-in-in

class C {
  #brand;

  static isC(obj) {
    try {
      obj.#brand;
      return true;
    } catch {
      return false;
    }
  }
}

class C {
  #data = null; // populated later

  get #getter() {
    if (!this.#data) {
      throw new Error('no data yet!');
    }
    return this.#data;
  }

  static isC(obj) {
    try {
      obj.#getter;
      return true;
    } catch {
      return false; // oops! might have gotten here because \`#getter\` threw :-(
    }
  }
}

class C {
  #brand;

  #method() {}

  get #getter() {}

  static isC(obj) {
    return #brand in obj && #method in obj && #getter in obj;
  }
}

// Invalid https://github.com/tc39/proposal-private-fields-in-in#try-statement
// class C {
//   #brand;

//   static isC(obj) {
//     return try obj.#brand;
//   }
// }
",
  "plugins": "[
  [
    [
      \\"classProperties\\",
      {}
    ],
    [
      \\"classPrivateProperties\\",
      {}
    ],
    [
      \\"throwExpressions\\",
      {}
    ],
    [
      \\"classPrivateMethods\\",
      {}
    ],
    [
      \\"privateIn\\",
      {}
    ]
  ],
  [
    [
      \\"classProperties\\",
      {}
    ],
    [
      \\"classPrivateProperties\\",
      {}
    ],
    [
      \\"throwExpressions\\",
      {}
    ],
    [
      \\"classPrivateMethods\\",
      {}
    ],
    [
      \\"privateIn\\",
      {}
    ],
    [
      \\"flow\\",
      {}
    ]
  ]
]",
}
`;

exports[`babel private-methods.js 1`] = `
Object {
  "input": "// https://babeljs.io/docs/en/babel-plugin-proposal-private-methods

// Test for \`classPrivateProperties\` and \`classPrivateMethods\`

class Counter extends HTMLElement {
  #xValue = 0;

  get #x() { return this.#xValue; }
  set #x(value) {
    this.#xValue = value;
    window.requestAnimationFrame(
      this.#render.bind(this));
  }

  #clicked() {
    this.#x++;
  }
}
",
  "plugins": "[
  [
    [
      \\"doExpressions\\",
      {}
    ],
    [
      \\"classProperties\\",
      {}
    ],
    [
      \\"classPrivateProperties\\",
      {}
    ],
    [
      \\"classPrivateMethods\\",
      {}
    ],
    [
      \\"privateIn\\",
      {}
    ]
  ],
  [
    [
      \\"doExpressions\\",
      {}
    ],
    [
      \\"classProperties\\",
      {}
    ],
    [
      \\"classPrivateProperties\\",
      {}
    ],
    [
      \\"classPrivateMethods\\",
      {}
    ],
    [
      \\"privateIn\\",
      {}
    ],
    [
      \\"flow\\",
      {}
    ]
  ]
]",
}
`;

exports[`babel record-tuple-record.js 1`] = `
Object {
  "input": "const record1 = #{
    a: 1,
    b: 2,
    c: 3,
};

const record2 = #{...record1, b: 5};
",
  "plugins": "[
  [
    [
      \\"recordAndTuple\\",
      {
        \\"syntaxType\\": \\"hash\\"
      }
    ]
  ],
  [
    [
      \\"recordAndTuple\\",
      {
        \\"syntaxType\\": \\"hash\\"
      }
    ],
    [
      \\"flow\\",
      {}
    ]
  ]
]",
}
`;

exports[`babel record-tuple-tuple.js 1`] = `
Object {
  "input": "const tuple1 = #[1, 2, 3];
",
  "plugins": "[
  [
    [
      \\"recordAndTuple\\",
      {
        \\"syntaxType\\": \\"hash\\"
      }
    ]
  ],
  [
    [
      \\"recordAndTuple\\",
      {
        \\"syntaxType\\": \\"hash\\"
      }
    ],
    [
      \\"flow\\",
      {}
    ]
  ]
]",
}
`;

exports[`babel throw-expressions.js 1`] = `
Object {
  "input": "// https://babeljs.io/docs/en/babel-plugin-proposal-throw-expressions

function test(param = throw new Error('required!')) {
  const test = param === true || throw new Error('Falsy!');
}
",
  "plugins": "[
  [
    [
      \\"doExpressions\\",
      {}
    ],
    [
      \\"throwExpressions\\",
      {}
    ]
  ],
  [
    [
      \\"doExpressions\\",
      {}
    ],
    [
      \\"throwExpressions\\",
      {}
    ],
    [
      \\"flow\\",
      {}
    ]
  ]
]",
}
`;

exports[`babel typescript.js 1`] = `
Object {
  "input": "// https://babeljs.io/docs/en/babel-preset-typescript

const x: number = 0;
",
  "plugins": "[
  [
    [
      \\"doExpressions\\",
      {}
    ]
  ],
  [
    [
      \\"doExpressions\\",
      {}
    ],
    [
      \\"flow\\",
      {}
    ]
  ]
]",
}
`;

exports[`babel v8intrinsic.js 1`] = `
Object {
  "input": "// https://github.com/babel/babel/pull/10148

%DebugPrint(foo);


// Invalid code https://github.com/JLHwung/babel/blob/c1a3cbfd65e08b7013fd6f8c62add8cb10b4b169/packages/babel-parser/test/fixtures/v8intrinsic/_errors/in-bind-expression/options.json
// ::%DebugPrint(null)

// Invalid code https://github.com/JLHwung/babel/blob/c1a3cbfd65e08b7013fd6f8c62add8cb10b4b169/packages/babel-parser/test/fixtures/v8intrinsic/_errors/in-member-expression/options.json
// a.%DebugPrint();

// Invalid code https://github.com/JLHwung/babel/blob/c1a3cbfd65e08b7013fd6f8c62add8cb10b4b169/packages/babel-parser/test/fixtures/v8intrinsic/_errors/not-in-call-expression/options.json
// const i = %DebugPrint;
// i(foo);

// https://github.com/JLHwung/babel/blob/c1a3cbfd65e08b7013fd6f8c62add8cb10b4b169/packages/babel-parser/test/fixtures/v8intrinsic/_errors/not-in-call-expression/options.json
// %DebugPrint?.(null)

new %DebugPrint(null);

function *foo() {
  yield %StringParseInt(\\"42\\", 10)
}

foo%bar()
",
  "plugins": "[
  [
    [
      \\"functionBind\\",
      {}
    ],
    [
      \\"v8intrinsic\\",
      {}
    ],
    [
      \\"partialApplication\\",
      {}
    ]
  ],
  [
    [
      \\"functionBind\\",
      {}
    ],
    [
      \\"v8intrinsic\\",
      {}
    ],
    [
      \\"partialApplication\\",
      {}
    ],
    [
      \\"flow\\",
      {}
    ]
  ]
]",
}
`;

exports[`babel-flow async-generators.js 1`] = `
Object {
  "input": "// https://babeljs.io/docs/en/babel-plugin-proposal-async-generator-functions

async function* agf() {
  await 1;
  yield 2;
}
",
  "plugins": "[
  [
    [
      \\"doExpressions\\",
      {}
    ],
    [
      \\"flow\\",
      {
        \\"all\\": true,
        \\"enums\\": true
      }
    ]
  ]
]",
}
`;

exports[`babel-flow bigint.js 1`] = `
Object {
  "input": "// https://github.com/tc39/proposal-bigint

const previousMaxSafe = BigInt(Number.MAX_SAFE_INTEGER);
// ↪ 9007199254740991

const maxPlusOne = previousMaxSafe + 1n;
// ↪ 9007199254740992n

const theFuture = previousMaxSafe + 2n;
// ↪ 9007199254740993n, this works now!

const multi = previousMaxSafe * 2n;
// ↪ 18014398509481982n

// \`–\` is not minus sign,
// SIC https://github.com/tc39/proposal-bigint#operators
// const subtr = multi – 10n;
// ↪ 18014398509481972n

const mod = multi % 10n;
// ↪ 2n

const bigN = 2n ** 54n;
// ↪ 18014398509481984n

bigN * -1n
// ↪ –18014398509481984n

0n === 0
// ↪ false

0n == 0
// ↪ true

1n < 2
// ↪ true

2n > 1
// ↪ true

2 > 2
// ↪ false

2n > 2
// ↪ false

2n >= 2
// ↪ true

const mixed = [4n, 6, -12n, 10, 4, 0, 0n];
// ↪  [4n, 6, -12n, 10, 4, 0, 0n]

mixed.sort();
// ↪ [-12n, 0, 0n, 10, 4n, 4, 6]

if (0n) {
  console.log('Hello from the if!');
} else {
  console.log('Hello from the else!');
}

// ↪ \\"Hello from the else!\\"

0n || 12n
// ↪ 12n

0n && 12n
// ↪ 0n

Boolean(0n)
// ↪ false

Boolean(12n)
// ↪ true

!12n
// ↪ false

!0n
// ↪ true

const view = new BigInt64Array(4);
// ↪ [0n, 0n, 0n, 0n]
view.length;
// ↪ 4
view[0];
// ↪ 0n
view[0] = 42n;
view[0];
// ↪ 42n

// Highest possible BigInt value that can be represented as a
// signed 64-bit integer.
const max = 2n ** (64n - 1n) - 1n;
view[0] = max;
view[0];
// ↪ 9_223_372_036_854_775_807n
view[0] = max + 1n;
view[0];
// ↪ -9_223_372_036_854_775_808n
//   ^ negative because of overflow

1n + 2
// ↪ TypeError: Cannot mix BigInt and other types, use explicit conversions

1n * 2
// ↪ TypeError: Cannot mix BigInt and other types, use explicit conversions

+1n
// ↪ TypeError: Cannot convert a BigInt value to a number

Number(1n)
// ↪ 1

1n + '2'
// ↪ \\"12\\"

'2' + 1n
// ↪ \\"21\\"

const badPrecision = BigInt(9007199254740993);
// ↪9007199254740992n

const goodPrecision = BigInt('9007199254740993');
// ↪9007199254740993n

const alsoGoodPrecision = 9007199254740993n;
// ↪9007199254740993n
",
  "plugins": "[
  [
    [
      \\"functionSent\\",
      {}
    ],
    [
      \\"numericSeparator\\",
      {}
    ],
    [
      \\"classPrivateProperties\\",
      {}
    ],
    [
      \\"classPrivateMethods\\",
      {}
    ],
    [
      \\"v8intrinsic\\",
      {}
    ],
    [
      \\"privateIn\\",
      {}
    ],
    [
      \\"flow\\",
      {
        \\"all\\": true,
        \\"enums\\": true
      }
    ]
  ]
]",
}
`;

exports[`babel-flow class-properties.js 1`] = `
Object {
  "input": "// https://babeljs.io/docs/en/babel-plugin-proposal-class-properties

class Bork {
    //Property initializer syntax
    instanceProperty = \\"bork\\";
    boundFunction = () => {
      return this.instanceProperty;
    };

    //Static class properties
    static staticProperty = \\"babelIsCool\\";
    static staticFunction = function() {
      return Bork.staticProperty;
    };
  }

  let myBork = new Bork;

  //Property initializers are not on the prototype.
  console.log(myBork.__proto__.boundFunction); // > undefined

  //Bound functions are bound to the class instance.
  console.log(myBork.boundFunction.call(undefined)); // > \\"bork\\"

  //Static function exists on the class.
  console.log(Bork.staticFunction()); // > \\"babelIsCool\\"
",
  "plugins": "[
  [
    [
      \\"doExpressions\\",
      {}
    ],
    [
      \\"classProperties\\",
      {}
    ],
    [
      \\"flow\\",
      {
        \\"all\\": true,
        \\"enums\\": true
      }
    ]
  ]
]",
}
`;

exports[`babel-flow decorators.js 1`] = `
Object {
  "input": "// https://babeljs.io/docs/en/babel-plugin-proposal-decorators

@annotation
class MyClass { }

function annotation(target) {
   target.annotated = true;
}

@isTestable(true)
class MyClass { }

function isTestable(value) {
   return function decorator(target) {
      target.isTestable = value;
   }
}

class C {
  @enumerable(false)
  method() { }
}

function enumerable(value) {
  return function (target, key, descriptor) {
     descriptor.enumerable = value;
     return descriptor;
  }
}
",
  "plugins": "[
  [
    [
      \\"doExpressions\\",
      {}
    ],
    [
      \\"classProperties\\",
      {}
    ],
    [
      \\"decorators\\",
      {
        \\"decoratorsBeforeExport\\": false
      }
    ],
    [
      \\"flow\\",
      {
        \\"all\\": true,
        \\"enums\\": true
      }
    ]
  ]
]",
}
`;

exports[`babel-flow do-expressions.js 1`] = `
Object {
  "input": "// https://babeljs.io/docs/en/babel-plugin-proposal-do-expressions

let a = do {
  if(x > 10) {
    'big';
  } else {
    'small';
  }
};
// is equivalent to:
let a = x > 10 ? 'big' : 'small';
",
  "plugins": "[
  [
    [
      \\"doExpressions\\",
      {}
    ],
    [
      \\"partialApplication\\",
      {}
    ],
    [
      \\"flow\\",
      {
        \\"all\\": true,
        \\"enums\\": true
      }
    ]
  ]
]",
}
`;

exports[`babel-flow dynamic-import.js 1`] = `
Object {
  "input": "// https://babeljs.io/docs/en/babel-plugin-syntax-dynamic-import

// There is no example code on babel website

import('./prettier.mjs');
import(prettier);
import('./prettier.mjs').then(module => console.log(module));
import(prettier).then(module => console.log(module));
",
  "plugins": "[
  [
    [
      \\"doExpressions\\",
      {}
    ],
    [
      \\"moduleAttributes\\",
      {
        \\"version\\": \\"may-2020\\"
      }
    ],
    [
      \\"flow\\",
      {
        \\"all\\": true,
        \\"enums\\": true
      }
    ]
  ]
]",
}
`;

exports[`babel-flow export-default-from.js 1`] = `
Object {
  "input": "// https://babeljs.io/docs/en/babel-plugin-proposal-export-default-from


export v from 'mod';
",
  "plugins": "[
  [
    [
      \\"doExpressions\\",
      {}
    ],
    [
      \\"exportDefaultFrom\\",
      {}
    ],
    [
      \\"flow\\",
      {
        \\"all\\": true,
        \\"enums\\": true
      }
    ]
  ]
]",
}
`;

exports[`babel-flow export-namespace-from.js 1`] = `
Object {
  "input": "// https://babeljs.io/docs/en/babel-plugin-proposal-export-namespace-from

export * as ns from 'mod';
",
  "plugins": "[
  [
    [
      \\"doExpressions\\",
      {}
    ],
    [
      \\"exportDefaultFrom\\",
      {}
    ],
    [
      \\"flow\\",
      {
        \\"all\\": true,
        \\"enums\\": true
      }
    ]
  ]
]",
}
`;

exports[`babel-flow flow.js 1`] = `
Object {
  "input": "// https://babeljs.io/docs/en/babel-preset-flow

function foo(one: any, two: number, three?): string {}
",
  "plugins": "[
  [
    [
      \\"doExpressions\\",
      {}
    ],
    [
      \\"partialApplication\\",
      {}
    ],
    [
      \\"flow\\",
      {
        \\"all\\": true,
        \\"enums\\": true
      }
    ]
  ]
]",
}
`;

exports[`babel-flow function-bind.js 1`] = `
Object {
  "input": "// https://babeljs.io/docs/en/babel-plugin-proposal-function-bind

obj::func
// is equivalent to:
func.bind(obj)

::obj.func
// is equivalent to:
obj.func.bind(obj)

obj::func(val)
// is equivalent to:
func.call(obj, val)

::obj.func(val)
// is equivalent to:
obj.func.call(obj, val)
",
  "plugins": "[
  [
    [
      \\"doExpressions\\",
      {}
    ],
    [
      \\"functionBind\\",
      {}
    ],
    [
      \\"flow\\",
      {
        \\"all\\": true,
        \\"enums\\": true
      }
    ]
  ]
]",
}
`;

exports[`babel-flow function-sent.js 1`] = `
Object {
  "input": "// https://babeljs.io/docs/en/babel-plugin-proposal-function-sent

function* generator() {
    console.log(\\"Sent\\", function.sent);
    console.log(\\"Yield\\", yield);
}

const iterator = generator();
iterator.next(1); // Logs \\"Sent 1\\"
iterator.next(2); // Logs \\"Yield 2\\"
",
  "plugins": "[
  [
    [
      \\"doExpressions\\",
      {}
    ],
    [
      \\"functionSent\\",
      {}
    ],
    [
      \\"flow\\",
      {
        \\"all\\": true,
        \\"enums\\": true
      }
    ]
  ]
]",
}
`;

exports[`babel-flow import-meta.js 1`] = `
Object {
  "input": "// https://babeljs.io/docs/en/babel-plugin-syntax-import-meta

// Enabled by default https://github.com/babel/babel/pull/11406

// from https://github.com/tc39/proposal-import-meta

(async () => {
  const response = await fetch(new URL(\\"../hamsters.jpg\\", import.meta.url));
  const blob = await response.blob();

  const size = import.meta.scriptElement.dataset.size || 300;

  const image = new Image();
  image.src = URL.createObjectURL(blob);
  image.width = image.height = size;

  document.body.appendChild(image);
})();
",
  "plugins": "[
  [
    [
      \\"doExpressions\\",
      {}
    ],
    [
      \\"moduleAttributes\\",
      {
        \\"version\\": \\"may-2020\\"
      }
    ],
    [
      \\"flow\\",
      {
        \\"all\\": true,
        \\"enums\\": true
      }
    ]
  ]
]",
}
`;

exports[`babel-flow jsx.js 1`] = `
Object {
  "input": "// https://babeljs.io/docs/en/babel-plugin-syntax-jsx

var profile = <div>
  <img src=\\"avatar.png\\" className=\\"profile\\" />
  <h3>{[user.firstName, user.lastName].join(' ')}</h3>
</div>;
",
  "plugins": "[
  [
    [
      \\"doExpressions\\",
      {}
    ],
    [
      \\"classProperties\\",
      {}
    ],
    [
      \\"jsx\\",
      {}
    ],
    [
      \\"flow\\",
      {
        \\"all\\": true,
        \\"enums\\": true
      }
    ]
  ]
]",
}
`;

exports[`babel-flow logical-assignment-operators.js 1`] = `
Object {
  "input": "// https://babeljs.io/docs/en/babel-plugin-proposal-logical-assignment-operators

a ||= b;
obj.a.b ||= c;

a &&= b;
obj.a.b &&= c;
",
  "plugins": "[
  [
    [
      \\"doExpressions\\",
      {}
    ],
    [
      \\"logicalAssignment\\",
      {}
    ],
    [
      \\"flow\\",
      {
        \\"all\\": true,
        \\"enums\\": true
      }
    ]
  ]
]",
}
`;

exports[`babel-flow module-attributes-dynamic.js 1`] = `
Object {
  "input": "import(\\"foo.json\\", { with: { type: \\"json\\" } })
",
  "plugins": "[
  [
    [
      \\"moduleAttributes\\",
      {
        \\"version\\": \\"may-2020\\"
      }
    ],
    [
      \\"flow\\",
      {
        \\"all\\": true,
        \\"enums\\": true
      }
    ]
  ]
]",
}
`;

exports[`babel-flow module-attributes-static.js 1`] = `
Object {
  "input": "import foo from \\"foo.json\\" with type: \\"json\\";
",
  "plugins": "[
  [
    [
      \\"moduleAttributes\\",
      {
        \\"version\\": \\"may-2020\\"
      }
    ],
    [
      \\"flow\\",
      {
        \\"all\\": true,
        \\"enums\\": true
      }
    ]
  ]
]",
}
`;

exports[`babel-flow nullish-coalescing-operator.js 1`] = `
Object {
  "input": "// https://babeljs.io/docs/en/babel-plugin-proposal-nullish-coalescing-operator

var foo = object.foo ?? \\"default\\";
",
  "plugins": "[
  [
    [
      \\"doExpressions\\",
      {}
    ],
    [
      \\"partialApplication\\",
      {}
    ],
    [
      \\"flow\\",
      {
        \\"all\\": true,
        \\"enums\\": true
      }
    ]
  ]
]",
}
`;

exports[`babel-flow numeric-separator.js 1`] = `
Object {
  "input": "// https://babeljs.io/docs/en/babel-plugin-proposal-numeric-separator

let budget = 1_000_000_000_000;

// What is the value of \`budget\`? It's 1 trillion!
//
// Let's confirm:
console.log(budget === 10 ** 12); // true

let nibbles = 0b1010_0001_1000_0101;

// Is bit 7 on? It sure is!
// 0b1010_0001_1000_0101
//             ^
//
// We can double check:
console.log(!!(nibbles & (1 << 7))); // true

// Messages are sent as 24 bit values, but should be
// treated as 3 distinct bytes:
let message = 0xa0_b0_c0;

// What's the value of the upper most byte? It's A0, or 160.
// We can confirm that:
let a = (message >> 16) & 0xff;
console.log(a.toString(16), a); // a0, 160

// What's the value of the middle byte? It's B0, or 176.
// Let's just make sure...
let b = (message >> 8) & 0xff;
console.log(b.toString(16), b); // b0, 176

// What's the value of the lower most byte? It's C0, or 192.
// Again, let's prove that:
let c = message & 0xff;
console.log(c.toString(16), b); // c0, 192
",
  "plugins": "[
  [
    [
      \\"doExpressions\\",
      {}
    ],
    [
      \\"functionSent\\",
      {}
    ],
    [
      \\"numericSeparator\\",
      {}
    ],
    [
      \\"partialApplication\\",
      {}
    ],
    [
      \\"flow\\",
      {
        \\"all\\": true,
        \\"enums\\": true
      }
    ]
  ]
]",
}
`;

exports[`babel-flow object-rest-spread.js 1`] = `
Object {
  "input": "// https://babeljs.io/docs/en/babel-plugin-transform-object-rest-spread

let { x, y, ...z } = { x: 1, y: 2, a: 3, b: 4 };
console.log(x); // 1
console.log(y); // 2
console.log(z); // { a: 3, b: 4 }

let n = { x, y, ...z };
console.log(n); // { x: 1, y: 2, a: 3, b: 4 }
",
  "plugins": "[
  [
    [
      \\"doExpressions\\",
      {}
    ],
    [
      \\"flow\\",
      {
        \\"all\\": true,
        \\"enums\\": true
      }
    ]
  ]
]",
}
`;

exports[`babel-flow optional-catch-binding.js 1`] = `
Object {
  "input": "// https://babeljs.io/docs/en/babel-plugin-proposal-optional-catch-binding

try {
  throw 0;
} catch {
  doSomethingWhichDoesNotCareAboutTheValueThrown();
}

try {
  throw 0;
} catch {
  doSomethingWhichDoesNotCareAboutTheValueThrown();
} finally {
  doSomeCleanup();
}
",
  "plugins": "[
  [
    [
      \\"doExpressions\\",
      {}
    ],
    [
      \\"throwExpressions\\",
      {}
    ],
    [
      \\"flow\\",
      {
        \\"all\\": true,
        \\"enums\\": true
      }
    ]
  ]
]",
}
`;

exports[`babel-flow optional-chaining.js 1`] = `
Object {
  "input": "// https://babeljs.io/docs/en/babel-plugin-proposal-optional-chaining

const obj = {
  foo: {
    bar: {
      baz: 42,
    },
  },
};

const baz = obj?.foo?.bar?.baz; // 42

const safe = obj?.qux?.baz; // undefined

// Optional chaining and normal chaining can be intermixed
obj?.foo.bar?.baz; // Only access \`foo\` if \`obj\` exists, and \`baz\` if
                   // \`bar\` exists

// Example usage with bracket notation:
obj?.['foo']?.bar?.baz // 42

const obj = {
  foo: {
    bar: {
      baz() {
        return 42;
      },
    },
  },
};

const baz = obj?.foo?.bar?.baz(); // 42

const safe = obj?.qux?.baz(); // undefined
const safe2 = obj?.foo.bar.qux?.(); // undefined

const willThrow = obj?.foo.bar.qux(); // Error: not a function

// Top function can be called directly, too.
function test() {
  return 42;
}
test?.(); // 42

exists?.(); // undefined

const obj = {
  foo: {
    bar: {
      baz: class {
      },
    },
  },
};

const baz = new obj?.foo?.bar?.baz(); // baz instance

const safe = new obj?.qux?.baz(); // undefined
const safe2 = new obj?.foo.bar.qux?.(); // undefined

const willThrow = new obj?.foo.bar.qux(); // Error: not a constructor

// Top classes can be called directly, too.
class Test {
}
new Test?.(); // test instance

new exists?.(); // undefined

const obj = {
  foo: {
    bar: {}
  },
};

const ret = delete obj?.foo?.bar?.baz; // true
",
  "plugins": "[
  [
    [
      \\"doExpressions\\",
      {}
    ],
    [
      \\"classProperties\\",
      {}
    ],
    [
      \\"partialApplication\\",
      {}
    ],
    [
      \\"flow\\",
      {
        \\"all\\": true,
        \\"enums\\": true
      }
    ]
  ]
]",
}
`;

exports[`babel-flow partial-application.js 1`] = `
Object {
  "input": "// https://babeljs.io/docs/en/babel-plugin-proposal-partial-application

function add(x, y) { return x + y; }

const addOne = add(1, ?); // apply from the left
addOne(2); // 3

const addTen = add(?, 10); // apply from the right
addTen(2); // 12

let newScore = player.score
  |> add(7, ?)
  |> clamp(0, 100, ?); // shallow stack, the pipe to \`clamp\` is the same frame as the pipe to \`add\`.

f(x, ?)           // partial application from left
f(?, x)           // partial application from right
f(?, x, ?)        // partial application for any arg
o.f(x, ?)         // partial application from left
o.f(?, x)         // partial application from right
o.f(?, x, ?)      // partial application for any arg
super.f(?)        // partial application allowed for call on |SuperProperty|
",
  "plugins": "[
  [
    [
      \\"doExpressions\\",
      {}
    ],
    [
      \\"partialApplication\\",
      {}
    ],
    [
      \\"pipelineOperator\\",
      {
        \\"proposal\\": \\"smart\\"
      }
    ],
    [
      \\"flow\\",
      {
        \\"all\\": true,
        \\"enums\\": true
      }
    ]
  ],
  [
    [
      \\"doExpressions\\",
      {}
    ],
    [
      \\"partialApplication\\",
      {}
    ],
    [
      \\"pipelineOperator\\",
      {
        \\"proposal\\": \\"minimal\\"
      }
    ],
    [
      \\"flow\\",
      {
        \\"all\\": true,
        \\"enums\\": true
      }
    ]
  ],
  [
    [
      \\"doExpressions\\",
      {}
    ],
    [
      \\"partialApplication\\",
      {}
    ],
    [
      \\"pipelineOperator\\",
      {
        \\"proposal\\": \\"fsharp\\"
      }
    ],
    [
      \\"flow\\",
      {
        \\"all\\": true,
        \\"enums\\": true
      }
    ]
  ]
]",
}
`;

exports[`babel-flow pipeline-operator-fsharp.js 1`] = `
Object {
  "input": "// https://babeljs.io/docs/en/babel-plugin-proposal-pipeline-operator
// https://github.com/valtech-nyc/proposal-fsharp-pipelines

promise
  |> await
  |> x => doubleSay(x, ', ')
  |> capitalize
  |> x => x + '!'
  |> x => new User.Message(x)
  |> x => stream.write(x)
  |> await
  |> console.log;

const result = exclaim(capitalize(doubleSay(\\"hello\\")));
result //=> \\"Hello, hello!\\"

const result = \\"hello\\"
  |> doubleSay
  |> capitalize
  |> exclaim;

result //=> \\"Hello, hello!\\"

const person = { score: 25 };

const newScore = person.score
  |> double
  |> n => add(7, n)
  |> n => boundScore(0, 100, n);

newScore //=> 57

// As opposed to:
let newScore = boundScore(0, 100, add(7, double(person.score)));
",
  "plugins": "[
  [
    [
      \\"doExpressions\\",
      {}
    ],
    [
      \\"pipelineOperator\\",
      {
        \\"proposal\\": \\"smart\\"
      }
    ],
    [
      \\"flow\\",
      {
        \\"all\\": true,
        \\"enums\\": true
      }
    ]
  ],
  [
    [
      \\"doExpressions\\",
      {}
    ],
    [
      \\"pipelineOperator\\",
      {
        \\"proposal\\": \\"minimal\\"
      }
    ],
    [
      \\"flow\\",
      {
        \\"all\\": true,
        \\"enums\\": true
      }
    ]
  ],
  [
    [
      \\"doExpressions\\",
      {}
    ],
    [
      \\"pipelineOperator\\",
      {
        \\"proposal\\": \\"fsharp\\"
      }
    ],
    [
      \\"flow\\",
      {
        \\"all\\": true,
        \\"enums\\": true
      }
    ]
  ]
]",
}
`;

exports[`babel-flow pipeline-operator-minimal.js 1`] = `
Object {
  "input": "// https://babeljs.io/docs/en/babel-plugin-proposal-pipeline-operator
// https://github.com/tc39/proposal-pipeline-operator/

let result = exclaim(capitalize(doubleSay(\\"hello\\")));
result //=> \\"Hello, hello!\\"

let result = \\"hello\\"
  |> doubleSay
  |> capitalize
  |> exclaim;

result //=> \\"Hello, hello!\\"
",
  "plugins": "[
  [
    [
      \\"doExpressions\\",
      {}
    ],
    [
      \\"pipelineOperator\\",
      {
        \\"proposal\\": \\"smart\\"
      }
    ],
    [
      \\"flow\\",
      {
        \\"all\\": true,
        \\"enums\\": true
      }
    ]
  ],
  [
    [
      \\"doExpressions\\",
      {}
    ],
    [
      \\"pipelineOperator\\",
      {
        \\"proposal\\": \\"minimal\\"
      }
    ],
    [
      \\"flow\\",
      {
        \\"all\\": true,
        \\"enums\\": true
      }
    ]
  ],
  [
    [
      \\"doExpressions\\",
      {}
    ],
    [
      \\"pipelineOperator\\",
      {
        \\"proposal\\": \\"fsharp\\"
      }
    ],
    [
      \\"flow\\",
      {
        \\"all\\": true,
        \\"enums\\": true
      }
    ]
  ]
]",
}
`;

exports[`babel-flow pipeline-operator-smart.js 1`] = `
Object {
  "input": "// https://babeljs.io/docs/en/babel-plugin-proposal-pipeline-operator
// https://github.com/js-choi/proposal-smart-pipelines

value
|> await #
|> doubleSay(#, ', ')
|> capitalize // This is a function call.
|> # + '!'
|> new User.Message(#)
|> await #
|> console.log; // This is a method call.

// (The # token isn't final; it might instead be @ or ? or %.)
",
  "plugins": "[
  [
    [
      \\"doExpressions\\",
      {}
    ],
    [
      \\"classPrivateProperties\\",
      {}
    ],
    [
      \\"classPrivateMethods\\",
      {}
    ],
    [
      \\"v8intrinsic\\",
      {}
    ],
    [
      \\"partialApplication\\",
      {}
    ],
    [
      \\"decorators\\",
      {
        \\"decoratorsBeforeExport\\": false
      }
    ],
    [
      \\"privateIn\\",
      {}
    ],
    [
      \\"pipelineOperator\\",
      {
        \\"proposal\\": \\"smart\\"
      }
    ],
    [
      \\"flow\\",
      {
        \\"all\\": true,
        \\"enums\\": true
      }
    ]
  ],
  [
    [
      \\"doExpressions\\",
      {}
    ],
    [
      \\"classPrivateProperties\\",
      {}
    ],
    [
      \\"classPrivateMethods\\",
      {}
    ],
    [
      \\"v8intrinsic\\",
      {}
    ],
    [
      \\"partialApplication\\",
      {}
    ],
    [
      \\"decorators\\",
      {
        \\"decoratorsBeforeExport\\": false
      }
    ],
    [
      \\"privateIn\\",
      {}
    ],
    [
      \\"pipelineOperator\\",
      {
        \\"proposal\\": \\"minimal\\"
      }
    ],
    [
      \\"flow\\",
      {
        \\"all\\": true,
        \\"enums\\": true
      }
    ]
  ],
  [
    [
      \\"doExpressions\\",
      {}
    ],
    [
      \\"classPrivateProperties\\",
      {}
    ],
    [
      \\"classPrivateMethods\\",
      {}
    ],
    [
      \\"v8intrinsic\\",
      {}
    ],
    [
      \\"partialApplication\\",
      {}
    ],
    [
      \\"decorators\\",
      {
        \\"decoratorsBeforeExport\\": false
      }
    ],
    [
      \\"privateIn\\",
      {}
    ],
    [
      \\"pipelineOperator\\",
      {
        \\"proposal\\": \\"fsharp\\"
      }
    ],
    [
      \\"flow\\",
      {
        \\"all\\": true,
        \\"enums\\": true
      }
    ]
  ]
]",
}
`;

exports[`babel-flow private-fields-in-in.js 1`] = `
Object {
  "input": "// https://github.com/tc39/proposal-private-fields-in-in

class C {
  #brand;

  static isC(obj) {
    try {
      obj.#brand;
      return true;
    } catch {
      return false;
    }
  }
}

class C {
  #data = null; // populated later

  get #getter() {
    if (!this.#data) {
      throw new Error('no data yet!');
    }
    return this.#data;
  }

  static isC(obj) {
    try {
      obj.#getter;
      return true;
    } catch {
      return false; // oops! might have gotten here because \`#getter\` threw :-(
    }
  }
}

class C {
  #brand;

  #method() {}

  get #getter() {}

  static isC(obj) {
    return #brand in obj && #method in obj && #getter in obj;
  }
}

// Invalid https://github.com/tc39/proposal-private-fields-in-in#try-statement
// class C {
//   #brand;

//   static isC(obj) {
//     return try obj.#brand;
//   }
// }
",
  "plugins": "[
  [
    [
      \\"classProperties\\",
      {}
    ],
    [
      \\"classPrivateProperties\\",
      {}
    ],
    [
      \\"throwExpressions\\",
      {}
    ],
    [
      \\"classPrivateMethods\\",
      {}
    ],
    [
      \\"privateIn\\",
      {}
    ],
    [
      \\"flow\\",
      {
        \\"all\\": true,
        \\"enums\\": true
      }
    ]
  ]
]",
}
`;

exports[`babel-flow private-methods.js 1`] = `
Object {
  "input": "// https://babeljs.io/docs/en/babel-plugin-proposal-private-methods

// Test for \`classPrivateProperties\` and \`classPrivateMethods\`

class Counter extends HTMLElement {
  #xValue = 0;

  get #x() { return this.#xValue; }
  set #x(value) {
    this.#xValue = value;
    window.requestAnimationFrame(
      this.#render.bind(this));
  }

  #clicked() {
    this.#x++;
  }
}
",
  "plugins": "[
  [
    [
      \\"doExpressions\\",
      {}
    ],
    [
      \\"classProperties\\",
      {}
    ],
    [
      \\"classPrivateProperties\\",
      {}
    ],
    [
      \\"classPrivateMethods\\",
      {}
    ],
    [
      \\"privateIn\\",
      {}
    ],
    [
      \\"flow\\",
      {
        \\"all\\": true,
        \\"enums\\": true
      }
    ]
  ]
]",
}
`;

exports[`babel-flow record-tuple-record.js 1`] = `
Object {
  "input": "const record1 = #{
    a: 1,
    b: 2,
    c: 3,
};

const record2 = #{...record1, b: 5};
",
  "plugins": "[
  [
    [
      \\"recordAndTuple\\",
      {
        \\"syntaxType\\": \\"hash\\"
      }
    ],
    [
      \\"flow\\",
      {
        \\"all\\": true,
        \\"enums\\": true
      }
    ]
  ]
]",
}
`;

exports[`babel-flow record-tuple-tuple.js 1`] = `
Object {
  "input": "const tuple1 = #[1, 2, 3];
",
  "plugins": "[
  [
    [
      \\"recordAndTuple\\",
      {
        \\"syntaxType\\": \\"hash\\"
      }
    ],
    [
      \\"flow\\",
      {
        \\"all\\": true,
        \\"enums\\": true
      }
    ]
  ]
]",
}
`;

exports[`babel-flow throw-expressions.js 1`] = `
Object {
  "input": "// https://babeljs.io/docs/en/babel-plugin-proposal-throw-expressions

function test(param = throw new Error('required!')) {
  const test = param === true || throw new Error('Falsy!');
}
",
  "plugins": "[
  [
    [
      \\"doExpressions\\",
      {}
    ],
    [
      \\"throwExpressions\\",
      {}
    ],
    [
      \\"flow\\",
      {
        \\"all\\": true,
        \\"enums\\": true
      }
    ]
  ]
]",
}
`;

exports[`babel-flow typescript.js 1`] = `
Object {
  "input": "// https://babeljs.io/docs/en/babel-preset-typescript

const x: number = 0;
",
  "plugins": "[
  [
    [
      \\"doExpressions\\",
      {}
    ],
    [
      \\"flow\\",
      {
        \\"all\\": true,
        \\"enums\\": true
      }
    ]
  ]
]",
}
`;

exports[`babel-flow v8intrinsic.js 1`] = `
Object {
  "input": "// https://github.com/babel/babel/pull/10148

%DebugPrint(foo);


// Invalid code https://github.com/JLHwung/babel/blob/c1a3cbfd65e08b7013fd6f8c62add8cb10b4b169/packages/babel-parser/test/fixtures/v8intrinsic/_errors/in-bind-expression/options.json
// ::%DebugPrint(null)

// Invalid code https://github.com/JLHwung/babel/blob/c1a3cbfd65e08b7013fd6f8c62add8cb10b4b169/packages/babel-parser/test/fixtures/v8intrinsic/_errors/in-member-expression/options.json
// a.%DebugPrint();

// Invalid code https://github.com/JLHwung/babel/blob/c1a3cbfd65e08b7013fd6f8c62add8cb10b4b169/packages/babel-parser/test/fixtures/v8intrinsic/_errors/not-in-call-expression/options.json
// const i = %DebugPrint;
// i(foo);

// https://github.com/JLHwung/babel/blob/c1a3cbfd65e08b7013fd6f8c62add8cb10b4b169/packages/babel-parser/test/fixtures/v8intrinsic/_errors/not-in-call-expression/options.json
// %DebugPrint?.(null)

new %DebugPrint(null);

function *foo() {
  yield %StringParseInt(\\"42\\", 10)
}

foo%bar()
",
  "plugins": "[
  [
    [
      \\"functionBind\\",
      {}
    ],
    [
      \\"v8intrinsic\\",
      {}
    ],
    [
      \\"partialApplication\\",
      {}
    ],
    [
      \\"flow\\",
      {
        \\"all\\": true,
        \\"enums\\": true
      }
    ]
  ]
]",
}
`;

exports[`babel-ts async-generators.js 1`] = `
Object {
  "input": "// https://babeljs.io/docs/en/babel-plugin-proposal-async-generator-functions

async function* agf() {
  await 1;
  yield 2;
}
",
  "plugins": "[
  [
    [
      \\"doExpressions\\",
      {}
    ],
    [
      \\"typescript\\",
      {}
    ]
  ]
]",
}
`;

exports[`babel-ts bigint.js 1`] = `
Object {
  "input": "// https://github.com/tc39/proposal-bigint

const previousMaxSafe = BigInt(Number.MAX_SAFE_INTEGER);
// ↪ 9007199254740991

const maxPlusOne = previousMaxSafe + 1n;
// ↪ 9007199254740992n

const theFuture = previousMaxSafe + 2n;
// ↪ 9007199254740993n, this works now!

const multi = previousMaxSafe * 2n;
// ↪ 18014398509481982n

// \`–\` is not minus sign,
// SIC https://github.com/tc39/proposal-bigint#operators
// const subtr = multi – 10n;
// ↪ 18014398509481972n

const mod = multi % 10n;
// ↪ 2n

const bigN = 2n ** 54n;
// ↪ 18014398509481984n

bigN * -1n
// ↪ –18014398509481984n

0n === 0
// ↪ false

0n == 0
// ↪ true

1n < 2
// ↪ true

2n > 1
// ↪ true

2 > 2
// ↪ false

2n > 2
// ↪ false

2n >= 2
// ↪ true

const mixed = [4n, 6, -12n, 10, 4, 0, 0n];
// ↪  [4n, 6, -12n, 10, 4, 0, 0n]

mixed.sort();
// ↪ [-12n, 0, 0n, 10, 4n, 4, 6]

if (0n) {
  console.log('Hello from the if!');
} else {
  console.log('Hello from the else!');
}

// ↪ \\"Hello from the else!\\"

0n || 12n
// ↪ 12n

0n && 12n
// ↪ 0n

Boolean(0n)
// ↪ false

Boolean(12n)
// ↪ true

!12n
// ↪ false

!0n
// ↪ true

const view = new BigInt64Array(4);
// ↪ [0n, 0n, 0n, 0n]
view.length;
// ↪ 4
view[0];
// ↪ 0n
view[0] = 42n;
view[0];
// ↪ 42n

// Highest possible BigInt value that can be represented as a
// signed 64-bit integer.
const max = 2n ** (64n - 1n) - 1n;
view[0] = max;
view[0];
// ↪ 9_223_372_036_854_775_807n
view[0] = max + 1n;
view[0];
// ↪ -9_223_372_036_854_775_808n
//   ^ negative because of overflow

1n + 2
// ↪ TypeError: Cannot mix BigInt and other types, use explicit conversions

1n * 2
// ↪ TypeError: Cannot mix BigInt and other types, use explicit conversions

+1n
// ↪ TypeError: Cannot convert a BigInt value to a number

Number(1n)
// ↪ 1

1n + '2'
// ↪ \\"12\\"

'2' + 1n
// ↪ \\"21\\"

const badPrecision = BigInt(9007199254740993);
// ↪9007199254740992n

const goodPrecision = BigInt('9007199254740993');
// ↪9007199254740993n

const alsoGoodPrecision = 9007199254740993n;
// ↪9007199254740993n
",
  "plugins": "[
  [
    [
      \\"functionSent\\",
      {}
    ],
    [
      \\"numericSeparator\\",
      {}
    ],
    [
      \\"classPrivateProperties\\",
      {}
    ],
    [
      \\"classPrivateMethods\\",
      {}
    ],
    [
      \\"v8intrinsic\\",
      {}
    ],
    [
      \\"privateIn\\",
      {}
    ],
    [
      \\"typescript\\",
      {}
    ]
  ]
]",
}
`;

exports[`babel-ts class-properties.js 1`] = `
Object {
  "input": "// https://babeljs.io/docs/en/babel-plugin-proposal-class-properties

class Bork {
    //Property initializer syntax
    instanceProperty = \\"bork\\";
    boundFunction = () => {
      return this.instanceProperty;
    };

    //Static class properties
    static staticProperty = \\"babelIsCool\\";
    static staticFunction = function() {
      return Bork.staticProperty;
    };
  }

  let myBork = new Bork;

  //Property initializers are not on the prototype.
  console.log(myBork.__proto__.boundFunction); // > undefined

  //Bound functions are bound to the class instance.
  console.log(myBork.boundFunction.call(undefined)); // > \\"bork\\"

  //Static function exists on the class.
  console.log(Bork.staticFunction()); // > \\"babelIsCool\\"
",
  "plugins": "[
  [
    [
      \\"doExpressions\\",
      {}
    ],
    [
      \\"classProperties\\",
      {}
    ],
    [
      \\"typescript\\",
      {}
    ]
  ]
]",
}
`;

exports[`babel-ts decorators.js 1`] = `
Object {
  "input": "// https://babeljs.io/docs/en/babel-plugin-proposal-decorators

@annotation
class MyClass { }

function annotation(target) {
   target.annotated = true;
}

@isTestable(true)
class MyClass { }

function isTestable(value) {
   return function decorator(target) {
      target.isTestable = value;
   }
}

class C {
  @enumerable(false)
  method() { }
}

function enumerable(value) {
  return function (target, key, descriptor) {
     descriptor.enumerable = value;
     return descriptor;
  }
}
",
  "plugins": "[
  [
    [
      \\"doExpressions\\",
      {}
    ],
    [
      \\"classProperties\\",
      {}
    ],
    [
      \\"decorators\\",
      {
        \\"decoratorsBeforeExport\\": false
      }
    ],
    [
      \\"typescript\\",
      {}
    ]
  ]
]",
}
`;

exports[`babel-ts do-expressions.js 1`] = `
Object {
  "input": "// https://babeljs.io/docs/en/babel-plugin-proposal-do-expressions

let a = do {
  if(x > 10) {
    'big';
  } else {
    'small';
  }
};
// is equivalent to:
let a = x > 10 ? 'big' : 'small';
",
  "plugins": "[
  [
    [
      \\"doExpressions\\",
      {}
    ],
    [
      \\"partialApplication\\",
      {}
    ],
    [
      \\"typescript\\",
      {}
    ]
  ]
]",
}
`;

exports[`babel-ts dynamic-import.js 1`] = `
Object {
  "input": "// https://babeljs.io/docs/en/babel-plugin-syntax-dynamic-import

// There is no example code on babel website

import('./prettier.mjs');
import(prettier);
import('./prettier.mjs').then(module => console.log(module));
import(prettier).then(module => console.log(module));
",
  "plugins": "[
  [
    [
      \\"doExpressions\\",
      {}
    ],
    [
      \\"moduleAttributes\\",
      {
        \\"version\\": \\"may-2020\\"
      }
    ],
    [
      \\"typescript\\",
      {}
    ]
  ]
]",
}
`;

exports[`babel-ts export-default-from.js 1`] = `
Object {
  "input": "// https://babeljs.io/docs/en/babel-plugin-proposal-export-default-from


export v from 'mod';
",
  "plugins": "[
  [
    [
      \\"doExpressions\\",
      {}
    ],
    [
      \\"exportDefaultFrom\\",
      {}
    ],
    [
      \\"typescript\\",
      {}
    ]
  ]
]",
}
`;

exports[`babel-ts export-namespace-from.js 1`] = `
Object {
  "input": "// https://babeljs.io/docs/en/babel-plugin-proposal-export-namespace-from

export * as ns from 'mod';
",
  "plugins": "[
  [
    [
      \\"doExpressions\\",
      {}
    ],
    [
      \\"exportDefaultFrom\\",
      {}
    ],
    [
      \\"typescript\\",
      {}
    ]
  ]
]",
}
`;

exports[`babel-ts flow.js 1`] = `
Object {
  "input": "// https://babeljs.io/docs/en/babel-preset-flow

function foo(one: any, two: number, three?): string {}
",
  "plugins": "[
  [
    [
      \\"doExpressions\\",
      {}
    ],
    [
      \\"partialApplication\\",
      {}
    ],
    [
      \\"typescript\\",
      {}
    ]
  ]
]",
}
`;

exports[`babel-ts function-bind.js 1`] = `
Object {
  "input": "// https://babeljs.io/docs/en/babel-plugin-proposal-function-bind

obj::func
// is equivalent to:
func.bind(obj)

::obj.func
// is equivalent to:
obj.func.bind(obj)

obj::func(val)
// is equivalent to:
func.call(obj, val)

::obj.func(val)
// is equivalent to:
obj.func.call(obj, val)
",
  "plugins": "[
  [
    [
      \\"doExpressions\\",
      {}
    ],
    [
      \\"functionBind\\",
      {}
    ],
    [
      \\"typescript\\",
      {}
    ]
  ]
]",
}
`;

exports[`babel-ts function-sent.js 1`] = `
Object {
  "input": "// https://babeljs.io/docs/en/babel-plugin-proposal-function-sent

function* generator() {
    console.log(\\"Sent\\", function.sent);
    console.log(\\"Yield\\", yield);
}

const iterator = generator();
iterator.next(1); // Logs \\"Sent 1\\"
iterator.next(2); // Logs \\"Yield 2\\"
",
  "plugins": "[
  [
    [
      \\"doExpressions\\",
      {}
    ],
    [
      \\"functionSent\\",
      {}
    ],
    [
      \\"typescript\\",
      {}
    ]
  ]
]",
}
`;

exports[`babel-ts import-meta.js 1`] = `
Object {
  "input": "// https://babeljs.io/docs/en/babel-plugin-syntax-import-meta

// Enabled by default https://github.com/babel/babel/pull/11406

// from https://github.com/tc39/proposal-import-meta

(async () => {
  const response = await fetch(new URL(\\"../hamsters.jpg\\", import.meta.url));
  const blob = await response.blob();

  const size = import.meta.scriptElement.dataset.size || 300;

  const image = new Image();
  image.src = URL.createObjectURL(blob);
  image.width = image.height = size;

  document.body.appendChild(image);
})();
",
  "plugins": "[
  [
    [
      \\"doExpressions\\",
      {}
    ],
    [
      \\"moduleAttributes\\",
      {
        \\"version\\": \\"may-2020\\"
      }
    ],
    [
      \\"typescript\\",
      {}
    ]
  ]
]",
}
`;

exports[`babel-ts jsx.js 1`] = `
Object {
  "input": "// https://babeljs.io/docs/en/babel-plugin-syntax-jsx

var profile = <div>
  <img src=\\"avatar.png\\" className=\\"profile\\" />
  <h3>{[user.firstName, user.lastName].join(' ')}</h3>
</div>;
",
  "plugins": "[
  [
    [
      \\"doExpressions\\",
      {}
    ],
    [
      \\"classProperties\\",
      {}
    ],
    [
      \\"jsx\\",
      {}
    ],
    [
      \\"typescript\\",
      {}
    ]
  ],
  [
    [
      \\"doExpressions\\",
      {}
    ],
    [
      \\"classProperties\\",
      {}
    ],
    [
      \\"typescript\\",
      {}
    ]
  ]
]",
}
`;

exports[`babel-ts logical-assignment-operators.js 1`] = `
Object {
  "input": "// https://babeljs.io/docs/en/babel-plugin-proposal-logical-assignment-operators

a ||= b;
obj.a.b ||= c;

a &&= b;
obj.a.b &&= c;
",
  "plugins": "[
  [
    [
      \\"doExpressions\\",
      {}
    ],
    [
      \\"logicalAssignment\\",
      {}
    ],
    [
      \\"typescript\\",
      {}
    ]
  ]
]",
}
`;

exports[`babel-ts module-attributes-dynamic.js 1`] = `
Object {
  "input": "import(\\"foo.json\\", { with: { type: \\"json\\" } })
",
  "plugins": "[
  [
    [
      \\"moduleAttributes\\",
      {
        \\"version\\": \\"may-2020\\"
      }
    ],
    [
      \\"typescript\\",
      {}
    ]
  ]
]",
}
`;

exports[`babel-ts module-attributes-static.js 1`] = `
Object {
  "input": "import foo from \\"foo.json\\" with type: \\"json\\";
",
  "plugins": "[
  [
    [
      \\"moduleAttributes\\",
      {
        \\"version\\": \\"may-2020\\"
      }
    ],
    [
      \\"typescript\\",
      {}
    ]
  ]
]",
}
`;

exports[`babel-ts nullish-coalescing-operator.js 1`] = `
Object {
  "input": "// https://babeljs.io/docs/en/babel-plugin-proposal-nullish-coalescing-operator

var foo = object.foo ?? \\"default\\";
",
  "plugins": "[
  [
    [
      \\"doExpressions\\",
      {}
    ],
    [
      \\"partialApplication\\",
      {}
    ],
    [
      \\"typescript\\",
      {}
    ]
  ]
]",
}
`;

exports[`babel-ts numeric-separator.js 1`] = `
Object {
  "input": "// https://babeljs.io/docs/en/babel-plugin-proposal-numeric-separator

let budget = 1_000_000_000_000;

// What is the value of \`budget\`? It's 1 trillion!
//
// Let's confirm:
console.log(budget === 10 ** 12); // true

let nibbles = 0b1010_0001_1000_0101;

// Is bit 7 on? It sure is!
// 0b1010_0001_1000_0101
//             ^
//
// We can double check:
console.log(!!(nibbles & (1 << 7))); // true

// Messages are sent as 24 bit values, but should be
// treated as 3 distinct bytes:
let message = 0xa0_b0_c0;

// What's the value of the upper most byte? It's A0, or 160.
// We can confirm that:
let a = (message >> 16) & 0xff;
console.log(a.toString(16), a); // a0, 160

// What's the value of the middle byte? It's B0, or 176.
// Let's just make sure...
let b = (message >> 8) & 0xff;
console.log(b.toString(16), b); // b0, 176

// What's the value of the lower most byte? It's C0, or 192.
// Again, let's prove that:
let c = message & 0xff;
console.log(c.toString(16), b); // c0, 192
",
  "plugins": "[
  [
    [
      \\"doExpressions\\",
      {}
    ],
    [
      \\"functionSent\\",
      {}
    ],
    [
      \\"numericSeparator\\",
      {}
    ],
    [
      \\"partialApplication\\",
      {}
    ],
    [
      \\"typescript\\",
      {}
    ]
  ]
]",
}
`;

exports[`babel-ts object-rest-spread.js 1`] = `
Object {
  "input": "// https://babeljs.io/docs/en/babel-plugin-transform-object-rest-spread

let { x, y, ...z } = { x: 1, y: 2, a: 3, b: 4 };
console.log(x); // 1
console.log(y); // 2
console.log(z); // { a: 3, b: 4 }

let n = { x, y, ...z };
console.log(n); // { x: 1, y: 2, a: 3, b: 4 }
",
  "plugins": "[
  [
    [
      \\"doExpressions\\",
      {}
    ],
    [
      \\"typescript\\",
      {}
    ]
  ]
]",
}
`;

exports[`babel-ts optional-catch-binding.js 1`] = `
Object {
  "input": "// https://babeljs.io/docs/en/babel-plugin-proposal-optional-catch-binding

try {
  throw 0;
} catch {
  doSomethingWhichDoesNotCareAboutTheValueThrown();
}

try {
  throw 0;
} catch {
  doSomethingWhichDoesNotCareAboutTheValueThrown();
} finally {
  doSomeCleanup();
}
",
  "plugins": "[
  [
    [
      \\"doExpressions\\",
      {}
    ],
    [
      \\"throwExpressions\\",
      {}
    ],
    [
      \\"typescript\\",
      {}
    ]
  ]
]",
}
`;

exports[`babel-ts optional-chaining.js 1`] = `
Object {
  "input": "// https://babeljs.io/docs/en/babel-plugin-proposal-optional-chaining

const obj = {
  foo: {
    bar: {
      baz: 42,
    },
  },
};

const baz = obj?.foo?.bar?.baz; // 42

const safe = obj?.qux?.baz; // undefined

// Optional chaining and normal chaining can be intermixed
obj?.foo.bar?.baz; // Only access \`foo\` if \`obj\` exists, and \`baz\` if
                   // \`bar\` exists

// Example usage with bracket notation:
obj?.['foo']?.bar?.baz // 42

const obj = {
  foo: {
    bar: {
      baz() {
        return 42;
      },
    },
  },
};

const baz = obj?.foo?.bar?.baz(); // 42

const safe = obj?.qux?.baz(); // undefined
const safe2 = obj?.foo.bar.qux?.(); // undefined

const willThrow = obj?.foo.bar.qux(); // Error: not a function

// Top function can be called directly, too.
function test() {
  return 42;
}
test?.(); // 42

exists?.(); // undefined

const obj = {
  foo: {
    bar: {
      baz: class {
      },
    },
  },
};

const baz = new obj?.foo?.bar?.baz(); // baz instance

const safe = new obj?.qux?.baz(); // undefined
const safe2 = new obj?.foo.bar.qux?.(); // undefined

const willThrow = new obj?.foo.bar.qux(); // Error: not a constructor

// Top classes can be called directly, too.
class Test {
}
new Test?.(); // test instance

new exists?.(); // undefined

const obj = {
  foo: {
    bar: {}
  },
};

const ret = delete obj?.foo?.bar?.baz; // true
",
  "plugins": "[
  [
    [
      \\"doExpressions\\",
      {}
    ],
    [
      \\"classProperties\\",
      {}
    ],
    [
      \\"partialApplication\\",
      {}
    ],
    [
      \\"typescript\\",
      {}
    ]
  ]
]",
}
`;

exports[`babel-ts partial-application.js 1`] = `
Object {
  "input": "// https://babeljs.io/docs/en/babel-plugin-proposal-partial-application

function add(x, y) { return x + y; }

const addOne = add(1, ?); // apply from the left
addOne(2); // 3

const addTen = add(?, 10); // apply from the right
addTen(2); // 12

let newScore = player.score
  |> add(7, ?)
  |> clamp(0, 100, ?); // shallow stack, the pipe to \`clamp\` is the same frame as the pipe to \`add\`.

f(x, ?)           // partial application from left
f(?, x)           // partial application from right
f(?, x, ?)        // partial application for any arg
o.f(x, ?)         // partial application from left
o.f(?, x)         // partial application from right
o.f(?, x, ?)      // partial application for any arg
super.f(?)        // partial application allowed for call on |SuperProperty|
",
  "plugins": "[
  [
    [
      \\"doExpressions\\",
      {}
    ],
    [
      \\"partialApplication\\",
      {}
    ],
    [
      \\"pipelineOperator\\",
      {
        \\"proposal\\": \\"smart\\"
      }
    ],
    [
      \\"typescript\\",
      {}
    ]
  ],
  [
    [
      \\"doExpressions\\",
      {}
    ],
    [
      \\"partialApplication\\",
      {}
    ],
    [
      \\"pipelineOperator\\",
      {
        \\"proposal\\": \\"minimal\\"
      }
    ],
    [
      \\"typescript\\",
      {}
    ]
  ],
  [
    [
      \\"doExpressions\\",
      {}
    ],
    [
      \\"partialApplication\\",
      {}
    ],
    [
      \\"pipelineOperator\\",
      {
        \\"proposal\\": \\"fsharp\\"
      }
    ],
    [
      \\"typescript\\",
      {}
    ]
  ]
]",
}
`;

exports[`babel-ts pipeline-operator-fsharp.js 1`] = `
Object {
  "input": "// https://babeljs.io/docs/en/babel-plugin-proposal-pipeline-operator
// https://github.com/valtech-nyc/proposal-fsharp-pipelines

promise
  |> await
  |> x => doubleSay(x, ', ')
  |> capitalize
  |> x => x + '!'
  |> x => new User.Message(x)
  |> x => stream.write(x)
  |> await
  |> console.log;

const result = exclaim(capitalize(doubleSay(\\"hello\\")));
result //=> \\"Hello, hello!\\"

const result = \\"hello\\"
  |> doubleSay
  |> capitalize
  |> exclaim;

result //=> \\"Hello, hello!\\"

const person = { score: 25 };

const newScore = person.score
  |> double
  |> n => add(7, n)
  |> n => boundScore(0, 100, n);

newScore //=> 57

// As opposed to:
let newScore = boundScore(0, 100, add(7, double(person.score)));
",
  "plugins": "[
  [
    [
      \\"doExpressions\\",
      {}
    ],
    [
      \\"pipelineOperator\\",
      {
        \\"proposal\\": \\"smart\\"
      }
    ],
    [
      \\"typescript\\",
      {}
    ]
  ],
  [
    [
      \\"doExpressions\\",
      {}
    ],
    [
      \\"pipelineOperator\\",
      {
        \\"proposal\\": \\"minimal\\"
      }
    ],
    [
      \\"typescript\\",
      {}
    ]
  ],
  [
    [
      \\"doExpressions\\",
      {}
    ],
    [
      \\"pipelineOperator\\",
      {
        \\"proposal\\": \\"fsharp\\"
      }
    ],
    [
      \\"typescript\\",
      {}
    ]
  ]
]",
}
`;

exports[`babel-ts pipeline-operator-minimal.js 1`] = `
Object {
  "input": "// https://babeljs.io/docs/en/babel-plugin-proposal-pipeline-operator
// https://github.com/tc39/proposal-pipeline-operator/

let result = exclaim(capitalize(doubleSay(\\"hello\\")));
result //=> \\"Hello, hello!\\"

let result = \\"hello\\"
  |> doubleSay
  |> capitalize
  |> exclaim;

result //=> \\"Hello, hello!\\"
",
  "plugins": "[
  [
    [
      \\"doExpressions\\",
      {}
    ],
    [
      \\"pipelineOperator\\",
      {
        \\"proposal\\": \\"smart\\"
      }
    ],
    [
      \\"typescript\\",
      {}
    ]
  ],
  [
    [
      \\"doExpressions\\",
      {}
    ],
    [
      \\"pipelineOperator\\",
      {
        \\"proposal\\": \\"minimal\\"
      }
    ],
    [
      \\"typescript\\",
      {}
    ]
  ],
  [
    [
      \\"doExpressions\\",
      {}
    ],
    [
      \\"pipelineOperator\\",
      {
        \\"proposal\\": \\"fsharp\\"
      }
    ],
    [
      \\"typescript\\",
      {}
    ]
  ]
]",
}
`;

exports[`babel-ts pipeline-operator-smart.js 1`] = `
Object {
  "input": "// https://babeljs.io/docs/en/babel-plugin-proposal-pipeline-operator
// https://github.com/js-choi/proposal-smart-pipelines

value
|> await #
|> doubleSay(#, ', ')
|> capitalize // This is a function call.
|> # + '!'
|> new User.Message(#)
|> await #
|> console.log; // This is a method call.

// (The # token isn't final; it might instead be @ or ? or %.)
",
  "plugins": "[
  [
    [
      \\"doExpressions\\",
      {}
    ],
    [
      \\"classPrivateProperties\\",
      {}
    ],
    [
      \\"classPrivateMethods\\",
      {}
    ],
    [
      \\"v8intrinsic\\",
      {}
    ],
    [
      \\"partialApplication\\",
      {}
    ],
    [
      \\"decorators\\",
      {
        \\"decoratorsBeforeExport\\": false
      }
    ],
    [
      \\"privateIn\\",
      {}
    ],
    [
      \\"pipelineOperator\\",
      {
        \\"proposal\\": \\"smart\\"
      }
    ],
    [
      \\"typescript\\",
      {}
    ]
  ],
  [
    [
      \\"doExpressions\\",
      {}
    ],
    [
      \\"classPrivateProperties\\",
      {}
    ],
    [
      \\"classPrivateMethods\\",
      {}
    ],
    [
      \\"v8intrinsic\\",
      {}
    ],
    [
      \\"partialApplication\\",
      {}
    ],
    [
      \\"decorators\\",
      {
        \\"decoratorsBeforeExport\\": false
      }
    ],
    [
      \\"privateIn\\",
      {}
    ],
    [
      \\"pipelineOperator\\",
      {
        \\"proposal\\": \\"minimal\\"
      }
    ],
    [
      \\"typescript\\",
      {}
    ]
  ],
  [
    [
      \\"doExpressions\\",
      {}
    ],
    [
      \\"classPrivateProperties\\",
      {}
    ],
    [
      \\"classPrivateMethods\\",
      {}
    ],
    [
      \\"v8intrinsic\\",
      {}
    ],
    [
      \\"partialApplication\\",
      {}
    ],
    [
      \\"decorators\\",
      {
        \\"decoratorsBeforeExport\\": false
      }
    ],
    [
      \\"privateIn\\",
      {}
    ],
    [
      \\"pipelineOperator\\",
      {
        \\"proposal\\": \\"fsharp\\"
      }
    ],
    [
      \\"typescript\\",
      {}
    ]
  ]
]",
}
`;

exports[`babel-ts private-fields-in-in.js 1`] = `
Object {
  "input": "// https://github.com/tc39/proposal-private-fields-in-in

class C {
  #brand;

  static isC(obj) {
    try {
      obj.#brand;
      return true;
    } catch {
      return false;
    }
  }
}

class C {
  #data = null; // populated later

  get #getter() {
    if (!this.#data) {
      throw new Error('no data yet!');
    }
    return this.#data;
  }

  static isC(obj) {
    try {
      obj.#getter;
      return true;
    } catch {
      return false; // oops! might have gotten here because \`#getter\` threw :-(
    }
  }
}

class C {
  #brand;

  #method() {}

  get #getter() {}

  static isC(obj) {
    return #brand in obj && #method in obj && #getter in obj;
  }
}

// Invalid https://github.com/tc39/proposal-private-fields-in-in#try-statement
// class C {
//   #brand;

//   static isC(obj) {
//     return try obj.#brand;
//   }
// }
",
  "plugins": "[
  [
    [
      \\"classProperties\\",
      {}
    ],
    [
      \\"classPrivateProperties\\",
      {}
    ],
    [
      \\"throwExpressions\\",
      {}
    ],
    [
      \\"classPrivateMethods\\",
      {}
    ],
    [
      \\"privateIn\\",
      {}
    ],
    [
      \\"typescript\\",
      {}
    ]
  ]
]",
}
`;

exports[`babel-ts private-methods.js 1`] = `
Object {
  "input": "// https://babeljs.io/docs/en/babel-plugin-proposal-private-methods

// Test for \`classPrivateProperties\` and \`classPrivateMethods\`

class Counter extends HTMLElement {
  #xValue = 0;

  get #x() { return this.#xValue; }
  set #x(value) {
    this.#xValue = value;
    window.requestAnimationFrame(
      this.#render.bind(this));
  }

  #clicked() {
    this.#x++;
  }
}
",
  "plugins": "[
  [
    [
      \\"doExpressions\\",
      {}
    ],
    [
      \\"classProperties\\",
      {}
    ],
    [
      \\"classPrivateProperties\\",
      {}
    ],
    [
      \\"classPrivateMethods\\",
      {}
    ],
    [
      \\"privateIn\\",
      {}
    ],
    [
      \\"typescript\\",
      {}
    ]
  ]
]",
}
`;

exports[`babel-ts record-tuple-record.js 1`] = `
Object {
  "input": "const record1 = #{
    a: 1,
    b: 2,
    c: 3,
};

const record2 = #{...record1, b: 5};
",
  "plugins": "[
  [
    [
      \\"recordAndTuple\\",
      {
        \\"syntaxType\\": \\"hash\\"
      }
    ],
    [
      \\"typescript\\",
      {}
    ]
  ]
]",
}
`;

exports[`babel-ts record-tuple-tuple.js 1`] = `
Object {
  "input": "const tuple1 = #[1, 2, 3];
",
  "plugins": "[
  [
    [
      \\"recordAndTuple\\",
      {
        \\"syntaxType\\": \\"hash\\"
      }
    ],
    [
      \\"typescript\\",
      {}
    ]
  ]
]",
}
`;

exports[`babel-ts throw-expressions.js 1`] = `
Object {
  "input": "// https://babeljs.io/docs/en/babel-plugin-proposal-throw-expressions

function test(param = throw new Error('required!')) {
  const test = param === true || throw new Error('Falsy!');
}
",
  "plugins": "[
  [
    [
      \\"doExpressions\\",
      {}
    ],
    [
      \\"throwExpressions\\",
      {}
    ],
    [
      \\"typescript\\",
      {}
    ]
  ]
]",
}
`;

exports[`babel-ts typescript.js 1`] = `
Object {
  "input": "// https://babeljs.io/docs/en/babel-preset-typescript

const x: number = 0;
",
  "plugins": "[
  [
    [
      \\"doExpressions\\",
      {}
    ],
    [
      \\"typescript\\",
      {}
    ]
  ]
]",
}
`;

exports[`babel-ts v8intrinsic.js 1`] = `
Object {
  "input": "// https://github.com/babel/babel/pull/10148

%DebugPrint(foo);


// Invalid code https://github.com/JLHwung/babel/blob/c1a3cbfd65e08b7013fd6f8c62add8cb10b4b169/packages/babel-parser/test/fixtures/v8intrinsic/_errors/in-bind-expression/options.json
// ::%DebugPrint(null)

// Invalid code https://github.com/JLHwung/babel/blob/c1a3cbfd65e08b7013fd6f8c62add8cb10b4b169/packages/babel-parser/test/fixtures/v8intrinsic/_errors/in-member-expression/options.json
// a.%DebugPrint();

// Invalid code https://github.com/JLHwung/babel/blob/c1a3cbfd65e08b7013fd6f8c62add8cb10b4b169/packages/babel-parser/test/fixtures/v8intrinsic/_errors/not-in-call-expression/options.json
// const i = %DebugPrint;
// i(foo);

// https://github.com/JLHwung/babel/blob/c1a3cbfd65e08b7013fd6f8c62add8cb10b4b169/packages/babel-parser/test/fixtures/v8intrinsic/_errors/not-in-call-expression/options.json
// %DebugPrint?.(null)

new %DebugPrint(null);

function *foo() {
  yield %StringParseInt(\\"42\\", 10)
}

foo%bar()
",
  "plugins": "[
  [
    [
      \\"functionBind\\",
      {}
    ],
    [
      \\"v8intrinsic\\",
      {}
    ],
    [
      \\"partialApplication\\",
      {}
    ],
    [
      \\"typescript\\",
      {}
    ]
  ]
]",
}
`;

exports[`json async-generators.js 1`] = `
Object {
  "input": "// https://babeljs.io/docs/en/babel-plugin-proposal-async-generator-functions

async function* agf() {
  await 1;
  yield 2;
}
",
  "plugins": "[
  [
    [
      \\"doExpressions\\",
      {}
    ]
  ]
]",
}
`;

exports[`json bigint.js 1`] = `
Object {
  "input": "// https://github.com/tc39/proposal-bigint

const previousMaxSafe = BigInt(Number.MAX_SAFE_INTEGER);
// ↪ 9007199254740991

const maxPlusOne = previousMaxSafe + 1n;
// ↪ 9007199254740992n

const theFuture = previousMaxSafe + 2n;
// ↪ 9007199254740993n, this works now!

const multi = previousMaxSafe * 2n;
// ↪ 18014398509481982n

// \`–\` is not minus sign,
// SIC https://github.com/tc39/proposal-bigint#operators
// const subtr = multi – 10n;
// ↪ 18014398509481972n

const mod = multi % 10n;
// ↪ 2n

const bigN = 2n ** 54n;
// ↪ 18014398509481984n

bigN * -1n
// ↪ –18014398509481984n

0n === 0
// ↪ false

0n == 0
// ↪ true

1n < 2
// ↪ true

2n > 1
// ↪ true

2 > 2
// ↪ false

2n > 2
// ↪ false

2n >= 2
// ↪ true

const mixed = [4n, 6, -12n, 10, 4, 0, 0n];
// ↪  [4n, 6, -12n, 10, 4, 0, 0n]

mixed.sort();
// ↪ [-12n, 0, 0n, 10, 4n, 4, 6]

if (0n) {
  console.log('Hello from the if!');
} else {
  console.log('Hello from the else!');
}

// ↪ \\"Hello from the else!\\"

0n || 12n
// ↪ 12n

0n && 12n
// ↪ 0n

Boolean(0n)
// ↪ false

Boolean(12n)
// ↪ true

!12n
// ↪ false

!0n
// ↪ true

const view = new BigInt64Array(4);
// ↪ [0n, 0n, 0n, 0n]
view.length;
// ↪ 4
view[0];
// ↪ 0n
view[0] = 42n;
view[0];
// ↪ 42n

// Highest possible BigInt value that can be represented as a
// signed 64-bit integer.
const max = 2n ** (64n - 1n) - 1n;
view[0] = max;
view[0];
// ↪ 9_223_372_036_854_775_807n
view[0] = max + 1n;
view[0];
// ↪ -9_223_372_036_854_775_808n
//   ^ negative because of overflow

1n + 2
// ↪ TypeError: Cannot mix BigInt and other types, use explicit conversions

1n * 2
// ↪ TypeError: Cannot mix BigInt and other types, use explicit conversions

+1n
// ↪ TypeError: Cannot convert a BigInt value to a number

Number(1n)
// ↪ 1

1n + '2'
// ↪ \\"12\\"

'2' + 1n
// ↪ \\"21\\"

const badPrecision = BigInt(9007199254740993);
// ↪9007199254740992n

const goodPrecision = BigInt('9007199254740993');
// ↪9007199254740993n

const alsoGoodPrecision = 9007199254740993n;
// ↪9007199254740993n
",
  "plugins": "[
  [
    [
      \\"functionSent\\",
      {}
    ],
    [
      \\"numericSeparator\\",
      {}
    ],
    [
      \\"classPrivateProperties\\",
      {}
    ],
    [
      \\"classPrivateMethods\\",
      {}
    ],
    [
      \\"v8intrinsic\\",
      {}
    ],
    [
      \\"privateIn\\",
      {}
    ]
  ]
]",
}
`;

exports[`json class-properties.js 1`] = `
Object {
  "input": "// https://babeljs.io/docs/en/babel-plugin-proposal-class-properties

class Bork {
    //Property initializer syntax
    instanceProperty = \\"bork\\";
    boundFunction = () => {
      return this.instanceProperty;
    };

    //Static class properties
    static staticProperty = \\"babelIsCool\\";
    static staticFunction = function() {
      return Bork.staticProperty;
    };
  }

  let myBork = new Bork;

  //Property initializers are not on the prototype.
  console.log(myBork.__proto__.boundFunction); // > undefined

  //Bound functions are bound to the class instance.
  console.log(myBork.boundFunction.call(undefined)); // > \\"bork\\"

  //Static function exists on the class.
  console.log(Bork.staticFunction()); // > \\"babelIsCool\\"
",
  "plugins": "[
  [
    [
      \\"doExpressions\\",
      {}
    ],
    [
      \\"classProperties\\",
      {}
    ]
  ]
]",
}
`;

exports[`json decorators.js 1`] = `
Object {
  "input": "// https://babeljs.io/docs/en/babel-plugin-proposal-decorators

@annotation
class MyClass { }

function annotation(target) {
   target.annotated = true;
}

@isTestable(true)
class MyClass { }

function isTestable(value) {
   return function decorator(target) {
      target.isTestable = value;
   }
}

class C {
  @enumerable(false)
  method() { }
}

function enumerable(value) {
  return function (target, key, descriptor) {
     descriptor.enumerable = value;
     return descriptor;
  }
}
",
  "plugins": "[
  [
    [
      \\"doExpressions\\",
      {}
    ],
    [
      \\"classProperties\\",
      {}
    ],
    [
      \\"decorators\\",
      {
        \\"decoratorsBeforeExport\\": false
      }
    ]
  ]
]",
}
`;

exports[`json do-expressions.js 1`] = `
Object {
  "input": "// https://babeljs.io/docs/en/babel-plugin-proposal-do-expressions

let a = do {
  if(x > 10) {
    'big';
  } else {
    'small';
  }
};
// is equivalent to:
let a = x > 10 ? 'big' : 'small';
",
  "plugins": "[
  [
    [
      \\"doExpressions\\",
      {}
    ],
    [
      \\"partialApplication\\",
      {}
    ]
  ]
]",
}
`;

exports[`json dynamic-import.js 1`] = `
Object {
  "input": "// https://babeljs.io/docs/en/babel-plugin-syntax-dynamic-import

// There is no example code on babel website

import('./prettier.mjs');
import(prettier);
import('./prettier.mjs').then(module => console.log(module));
import(prettier).then(module => console.log(module));
",
  "plugins": "[
  [
    [
      \\"doExpressions\\",
      {}
    ],
    [
      \\"moduleAttributes\\",
      {
        \\"version\\": \\"may-2020\\"
      }
    ]
  ]
]",
}
`;

exports[`json export-default-from.js 1`] = `
Object {
  "input": "// https://babeljs.io/docs/en/babel-plugin-proposal-export-default-from


export v from 'mod';
",
  "plugins": "[
  [
    [
      \\"doExpressions\\",
      {}
    ],
    [
      \\"exportDefaultFrom\\",
      {}
    ]
  ]
]",
}
`;

exports[`json export-namespace-from.js 1`] = `
Object {
  "input": "// https://babeljs.io/docs/en/babel-plugin-proposal-export-namespace-from

export * as ns from 'mod';
",
  "plugins": "[
  [
    [
      \\"doExpressions\\",
      {}
    ],
    [
      \\"exportDefaultFrom\\",
      {}
    ]
  ]
]",
}
`;

exports[`json flow.js 1`] = `
Object {
  "input": "// https://babeljs.io/docs/en/babel-preset-flow

function foo(one: any, two: number, three?): string {}
",
  "plugins": "[
  [
    [
      \\"doExpressions\\",
      {}
    ],
    [
      \\"partialApplication\\",
      {}
    ]
  ]
]",
}
`;

exports[`json function-bind.js 1`] = `
Object {
  "input": "// https://babeljs.io/docs/en/babel-plugin-proposal-function-bind

obj::func
// is equivalent to:
func.bind(obj)

::obj.func
// is equivalent to:
obj.func.bind(obj)

obj::func(val)
// is equivalent to:
func.call(obj, val)

::obj.func(val)
// is equivalent to:
obj.func.call(obj, val)
",
  "plugins": "[
  [
    [
      \\"doExpressions\\",
      {}
    ],
    [
      \\"functionBind\\",
      {}
    ]
  ]
]",
}
`;

exports[`json function-sent.js 1`] = `
Object {
  "input": "// https://babeljs.io/docs/en/babel-plugin-proposal-function-sent

function* generator() {
    console.log(\\"Sent\\", function.sent);
    console.log(\\"Yield\\", yield);
}

const iterator = generator();
iterator.next(1); // Logs \\"Sent 1\\"
iterator.next(2); // Logs \\"Yield 2\\"
",
  "plugins": "[
  [
    [
      \\"doExpressions\\",
      {}
    ],
    [
      \\"functionSent\\",
      {}
    ]
  ]
]",
}
`;

exports[`json import-meta.js 1`] = `
Object {
  "input": "// https://babeljs.io/docs/en/babel-plugin-syntax-import-meta

// Enabled by default https://github.com/babel/babel/pull/11406

// from https://github.com/tc39/proposal-import-meta

(async () => {
  const response = await fetch(new URL(\\"../hamsters.jpg\\", import.meta.url));
  const blob = await response.blob();

  const size = import.meta.scriptElement.dataset.size || 300;

  const image = new Image();
  image.src = URL.createObjectURL(blob);
  image.width = image.height = size;

  document.body.appendChild(image);
})();
",
  "plugins": "[
  [
    [
      \\"doExpressions\\",
      {}
    ],
    [
      \\"moduleAttributes\\",
      {
        \\"version\\": \\"may-2020\\"
      }
    ]
  ]
]",
}
`;

exports[`json jsx.js 1`] = `
Object {
  "input": "// https://babeljs.io/docs/en/babel-plugin-syntax-jsx

var profile = <div>
  <img src=\\"avatar.png\\" className=\\"profile\\" />
  <h3>{[user.firstName, user.lastName].join(' ')}</h3>
</div>;
",
  "plugins": "[
  [
    [
      \\"doExpressions\\",
      {}
    ],
    [
      \\"classProperties\\",
      {}
    ],
    [
      \\"jsx\\",
      {}
    ]
  ]
]",
}
`;

exports[`json logical-assignment-operators.js 1`] = `
Object {
  "input": "// https://babeljs.io/docs/en/babel-plugin-proposal-logical-assignment-operators

a ||= b;
obj.a.b ||= c;

a &&= b;
obj.a.b &&= c;
",
  "plugins": "[
  [
    [
      \\"doExpressions\\",
      {}
    ],
    [
      \\"logicalAssignment\\",
      {}
    ]
  ]
]",
}
`;

exports[`json module-attributes-dynamic.js 1`] = `
Object {
  "input": "import(\\"foo.json\\", { with: { type: \\"json\\" } })
",
  "plugins": "[
  [
    [
      \\"moduleAttributes\\",
      {
        \\"version\\": \\"may-2020\\"
      }
    ]
  ]
]",
}
`;

exports[`json module-attributes-static.js 1`] = `
Object {
  "input": "import foo from \\"foo.json\\" with type: \\"json\\";
",
  "plugins": "[
  [
    [
      \\"moduleAttributes\\",
      {
        \\"version\\": \\"may-2020\\"
      }
    ]
  ]
]",
}
`;

exports[`json nullish-coalescing-operator.js 1`] = `
Object {
  "input": "// https://babeljs.io/docs/en/babel-plugin-proposal-nullish-coalescing-operator

var foo = object.foo ?? \\"default\\";
",
  "plugins": "[
  [
    [
      \\"doExpressions\\",
      {}
    ],
    [
      \\"partialApplication\\",
      {}
    ]
  ]
]",
}
`;

exports[`json numeric-separator.js 1`] = `
Object {
  "input": "// https://babeljs.io/docs/en/babel-plugin-proposal-numeric-separator

let budget = 1_000_000_000_000;

// What is the value of \`budget\`? It's 1 trillion!
//
// Let's confirm:
console.log(budget === 10 ** 12); // true

let nibbles = 0b1010_0001_1000_0101;

// Is bit 7 on? It sure is!
// 0b1010_0001_1000_0101
//             ^
//
// We can double check:
console.log(!!(nibbles & (1 << 7))); // true

// Messages are sent as 24 bit values, but should be
// treated as 3 distinct bytes:
let message = 0xa0_b0_c0;

// What's the value of the upper most byte? It's A0, or 160.
// We can confirm that:
let a = (message >> 16) & 0xff;
console.log(a.toString(16), a); // a0, 160

// What's the value of the middle byte? It's B0, or 176.
// Let's just make sure...
let b = (message >> 8) & 0xff;
console.log(b.toString(16), b); // b0, 176

// What's the value of the lower most byte? It's C0, or 192.
// Again, let's prove that:
let c = message & 0xff;
console.log(c.toString(16), b); // c0, 192
",
  "plugins": "[
  [
    [
      \\"doExpressions\\",
      {}
    ],
    [
      \\"functionSent\\",
      {}
    ],
    [
      \\"numericSeparator\\",
      {}
    ],
    [
      \\"partialApplication\\",
      {}
    ]
  ]
]",
}
`;

exports[`json object-rest-spread.js 1`] = `
Object {
  "input": "// https://babeljs.io/docs/en/babel-plugin-transform-object-rest-spread

let { x, y, ...z } = { x: 1, y: 2, a: 3, b: 4 };
console.log(x); // 1
console.log(y); // 2
console.log(z); // { a: 3, b: 4 }

let n = { x, y, ...z };
console.log(n); // { x: 1, y: 2, a: 3, b: 4 }
",
  "plugins": "[
  [
    [
      \\"doExpressions\\",
      {}
    ]
  ]
]",
}
`;

exports[`json optional-catch-binding.js 1`] = `
Object {
  "input": "// https://babeljs.io/docs/en/babel-plugin-proposal-optional-catch-binding

try {
  throw 0;
} catch {
  doSomethingWhichDoesNotCareAboutTheValueThrown();
}

try {
  throw 0;
} catch {
  doSomethingWhichDoesNotCareAboutTheValueThrown();
} finally {
  doSomeCleanup();
}
",
  "plugins": "[
  [
    [
      \\"doExpressions\\",
      {}
    ],
    [
      \\"throwExpressions\\",
      {}
    ]
  ]
]",
}
`;

exports[`json optional-chaining.js 1`] = `
Object {
  "input": "// https://babeljs.io/docs/en/babel-plugin-proposal-optional-chaining

const obj = {
  foo: {
    bar: {
      baz: 42,
    },
  },
};

const baz = obj?.foo?.bar?.baz; // 42

const safe = obj?.qux?.baz; // undefined

// Optional chaining and normal chaining can be intermixed
obj?.foo.bar?.baz; // Only access \`foo\` if \`obj\` exists, and \`baz\` if
                   // \`bar\` exists

// Example usage with bracket notation:
obj?.['foo']?.bar?.baz // 42

const obj = {
  foo: {
    bar: {
      baz() {
        return 42;
      },
    },
  },
};

const baz = obj?.foo?.bar?.baz(); // 42

const safe = obj?.qux?.baz(); // undefined
const safe2 = obj?.foo.bar.qux?.(); // undefined

const willThrow = obj?.foo.bar.qux(); // Error: not a function

// Top function can be called directly, too.
function test() {
  return 42;
}
test?.(); // 42

exists?.(); // undefined

const obj = {
  foo: {
    bar: {
      baz: class {
      },
    },
  },
};

const baz = new obj?.foo?.bar?.baz(); // baz instance

const safe = new obj?.qux?.baz(); // undefined
const safe2 = new obj?.foo.bar.qux?.(); // undefined

const willThrow = new obj?.foo.bar.qux(); // Error: not a constructor

// Top classes can be called directly, too.
class Test {
}
new Test?.(); // test instance

new exists?.(); // undefined

const obj = {
  foo: {
    bar: {}
  },
};

const ret = delete obj?.foo?.bar?.baz; // true
",
  "plugins": "[
  [
    [
      \\"doExpressions\\",
      {}
    ],
    [
      \\"classProperties\\",
      {}
    ],
    [
      \\"partialApplication\\",
      {}
    ]
  ]
]",
}
`;

exports[`json partial-application.js 1`] = `
Object {
  "input": "// https://babeljs.io/docs/en/babel-plugin-proposal-partial-application

function add(x, y) { return x + y; }

const addOne = add(1, ?); // apply from the left
addOne(2); // 3

const addTen = add(?, 10); // apply from the right
addTen(2); // 12

let newScore = player.score
  |> add(7, ?)
  |> clamp(0, 100, ?); // shallow stack, the pipe to \`clamp\` is the same frame as the pipe to \`add\`.

f(x, ?)           // partial application from left
f(?, x)           // partial application from right
f(?, x, ?)        // partial application for any arg
o.f(x, ?)         // partial application from left
o.f(?, x)         // partial application from right
o.f(?, x, ?)      // partial application for any arg
super.f(?)        // partial application allowed for call on |SuperProperty|
",
  "plugins": "[
  [
    [
      \\"doExpressions\\",
      {}
    ],
    [
      \\"partialApplication\\",
      {}
    ],
    [
      \\"pipelineOperator\\",
      {
        \\"proposal\\": \\"smart\\"
      }
    ]
  ],
  [
    [
      \\"doExpressions\\",
      {}
    ],
    [
      \\"partialApplication\\",
      {}
    ],
    [
      \\"pipelineOperator\\",
      {
        \\"proposal\\": \\"minimal\\"
      }
    ]
  ],
  [
    [
      \\"doExpressions\\",
      {}
    ],
    [
      \\"partialApplication\\",
      {}
    ],
    [
      \\"pipelineOperator\\",
      {
        \\"proposal\\": \\"fsharp\\"
      }
    ]
  ]
]",
}
`;

exports[`json pipeline-operator-fsharp.js 1`] = `
Object {
  "input": "// https://babeljs.io/docs/en/babel-plugin-proposal-pipeline-operator
// https://github.com/valtech-nyc/proposal-fsharp-pipelines

promise
  |> await
  |> x => doubleSay(x, ', ')
  |> capitalize
  |> x => x + '!'
  |> x => new User.Message(x)
  |> x => stream.write(x)
  |> await
  |> console.log;

const result = exclaim(capitalize(doubleSay(\\"hello\\")));
result //=> \\"Hello, hello!\\"

const result = \\"hello\\"
  |> doubleSay
  |> capitalize
  |> exclaim;

result //=> \\"Hello, hello!\\"

const person = { score: 25 };

const newScore = person.score
  |> double
  |> n => add(7, n)
  |> n => boundScore(0, 100, n);

newScore //=> 57

// As opposed to:
let newScore = boundScore(0, 100, add(7, double(person.score)));
",
  "plugins": "[
  [
    [
      \\"doExpressions\\",
      {}
    ],
    [
      \\"pipelineOperator\\",
      {
        \\"proposal\\": \\"smart\\"
      }
    ]
  ],
  [
    [
      \\"doExpressions\\",
      {}
    ],
    [
      \\"pipelineOperator\\",
      {
        \\"proposal\\": \\"minimal\\"
      }
    ]
  ],
  [
    [
      \\"doExpressions\\",
      {}
    ],
    [
      \\"pipelineOperator\\",
      {
        \\"proposal\\": \\"fsharp\\"
      }
    ]
  ]
]",
}
`;

exports[`json pipeline-operator-minimal.js 1`] = `
Object {
  "input": "// https://babeljs.io/docs/en/babel-plugin-proposal-pipeline-operator
// https://github.com/tc39/proposal-pipeline-operator/

let result = exclaim(capitalize(doubleSay(\\"hello\\")));
result //=> \\"Hello, hello!\\"

let result = \\"hello\\"
  |> doubleSay
  |> capitalize
  |> exclaim;

result //=> \\"Hello, hello!\\"
",
  "plugins": "[
  [
    [
      \\"doExpressions\\",
      {}
    ],
    [
      \\"pipelineOperator\\",
      {
        \\"proposal\\": \\"smart\\"
      }
    ]
  ],
  [
    [
      \\"doExpressions\\",
      {}
    ],
    [
      \\"pipelineOperator\\",
      {
        \\"proposal\\": \\"minimal\\"
      }
    ]
  ],
  [
    [
      \\"doExpressions\\",
      {}
    ],
    [
      \\"pipelineOperator\\",
      {
        \\"proposal\\": \\"fsharp\\"
      }
    ]
  ]
]",
}
`;

exports[`json pipeline-operator-smart.js 1`] = `
Object {
  "input": "// https://babeljs.io/docs/en/babel-plugin-proposal-pipeline-operator
// https://github.com/js-choi/proposal-smart-pipelines

value
|> await #
|> doubleSay(#, ', ')
|> capitalize // This is a function call.
|> # + '!'
|> new User.Message(#)
|> await #
|> console.log; // This is a method call.

// (The # token isn't final; it might instead be @ or ? or %.)
",
  "plugins": "[
  [
    [
      \\"doExpressions\\",
      {}
    ],
    [
      \\"classPrivateProperties\\",
      {}
    ],
    [
      \\"classPrivateMethods\\",
      {}
    ],
    [
      \\"v8intrinsic\\",
      {}
    ],
    [
      \\"partialApplication\\",
      {}
    ],
    [
      \\"decorators\\",
      {
        \\"decoratorsBeforeExport\\": false
      }
    ],
    [
      \\"privateIn\\",
      {}
    ],
    [
      \\"pipelineOperator\\",
      {
        \\"proposal\\": \\"smart\\"
      }
    ]
  ],
  [
    [
      \\"doExpressions\\",
      {}
    ],
    [
      \\"classPrivateProperties\\",
      {}
    ],
    [
      \\"classPrivateMethods\\",
      {}
    ],
    [
      \\"v8intrinsic\\",
      {}
    ],
    [
      \\"partialApplication\\",
      {}
    ],
    [
      \\"decorators\\",
      {
        \\"decoratorsBeforeExport\\": false
      }
    ],
    [
      \\"privateIn\\",
      {}
    ],
    [
      \\"pipelineOperator\\",
      {
        \\"proposal\\": \\"minimal\\"
      }
    ]
  ],
  [
    [
      \\"doExpressions\\",
      {}
    ],
    [
      \\"classPrivateProperties\\",
      {}
    ],
    [
      \\"classPrivateMethods\\",
      {}
    ],
    [
      \\"v8intrinsic\\",
      {}
    ],
    [
      \\"partialApplication\\",
      {}
    ],
    [
      \\"decorators\\",
      {
        \\"decoratorsBeforeExport\\": false
      }
    ],
    [
      \\"privateIn\\",
      {}
    ],
    [
      \\"pipelineOperator\\",
      {
        \\"proposal\\": \\"fsharp\\"
      }
    ]
  ]
]",
}
`;

exports[`json private-fields-in-in.js 1`] = `
Object {
  "input": "// https://github.com/tc39/proposal-private-fields-in-in

class C {
  #brand;

  static isC(obj) {
    try {
      obj.#brand;
      return true;
    } catch {
      return false;
    }
  }
}

class C {
  #data = null; // populated later

  get #getter() {
    if (!this.#data) {
      throw new Error('no data yet!');
    }
    return this.#data;
  }

  static isC(obj) {
    try {
      obj.#getter;
      return true;
    } catch {
      return false; // oops! might have gotten here because \`#getter\` threw :-(
    }
  }
}

class C {
  #brand;

  #method() {}

  get #getter() {}

  static isC(obj) {
    return #brand in obj && #method in obj && #getter in obj;
  }
}

// Invalid https://github.com/tc39/proposal-private-fields-in-in#try-statement
// class C {
//   #brand;

//   static isC(obj) {
//     return try obj.#brand;
//   }
// }
",
  "plugins": "[
  [
    [
      \\"classProperties\\",
      {}
    ],
    [
      \\"classPrivateProperties\\",
      {}
    ],
    [
      \\"throwExpressions\\",
      {}
    ],
    [
      \\"classPrivateMethods\\",
      {}
    ],
    [
      \\"privateIn\\",
      {}
    ]
  ]
]",
}
`;

exports[`json private-methods.js 1`] = `
Object {
  "input": "// https://babeljs.io/docs/en/babel-plugin-proposal-private-methods

// Test for \`classPrivateProperties\` and \`classPrivateMethods\`

class Counter extends HTMLElement {
  #xValue = 0;

  get #x() { return this.#xValue; }
  set #x(value) {
    this.#xValue = value;
    window.requestAnimationFrame(
      this.#render.bind(this));
  }

  #clicked() {
    this.#x++;
  }
}
",
  "plugins": "[
  [
    [
      \\"doExpressions\\",
      {}
    ],
    [
      \\"classProperties\\",
      {}
    ],
    [
      \\"classPrivateProperties\\",
      {}
    ],
    [
      \\"classPrivateMethods\\",
      {}
    ],
    [
      \\"privateIn\\",
      {}
    ]
  ]
]",
}
`;

exports[`json record-tuple-record.js 1`] = `
Object {
  "input": "const record1 = #{
    a: 1,
    b: 2,
    c: 3,
};

const record2 = #{...record1, b: 5};
",
  "plugins": "[
  [
    [
      \\"recordAndTuple\\",
      {
        \\"syntaxType\\": \\"hash\\"
      }
    ]
  ]
]",
}
`;

exports[`json record-tuple-tuple.js 1`] = `
Object {
  "input": "const tuple1 = #[1, 2, 3];
",
  "plugins": "[
  [
    [
      \\"recordAndTuple\\",
      {
        \\"syntaxType\\": \\"hash\\"
      }
    ]
  ]
]",
}
`;

exports[`json throw-expressions.js 1`] = `
Object {
  "input": "// https://babeljs.io/docs/en/babel-plugin-proposal-throw-expressions

function test(param = throw new Error('required!')) {
  const test = param === true || throw new Error('Falsy!');
}
",
  "plugins": "[
  [
    [
      \\"doExpressions\\",
      {}
    ],
    [
      \\"throwExpressions\\",
      {}
    ]
  ]
]",
}
`;

exports[`json typescript.js 1`] = `
Object {
  "input": "// https://babeljs.io/docs/en/babel-preset-typescript

const x: number = 0;
",
  "plugins": "[
  [
    [
      \\"doExpressions\\",
      {}
    ]
  ]
]",
}
`;

exports[`json v8intrinsic.js 1`] = `
Object {
  "input": "// https://github.com/babel/babel/pull/10148

%DebugPrint(foo);


// Invalid code https://github.com/JLHwung/babel/blob/c1a3cbfd65e08b7013fd6f8c62add8cb10b4b169/packages/babel-parser/test/fixtures/v8intrinsic/_errors/in-bind-expression/options.json
// ::%DebugPrint(null)

// Invalid code https://github.com/JLHwung/babel/blob/c1a3cbfd65e08b7013fd6f8c62add8cb10b4b169/packages/babel-parser/test/fixtures/v8intrinsic/_errors/in-member-expression/options.json
// a.%DebugPrint();

// Invalid code https://github.com/JLHwung/babel/blob/c1a3cbfd65e08b7013fd6f8c62add8cb10b4b169/packages/babel-parser/test/fixtures/v8intrinsic/_errors/not-in-call-expression/options.json
// const i = %DebugPrint;
// i(foo);

// https://github.com/JLHwung/babel/blob/c1a3cbfd65e08b7013fd6f8c62add8cb10b4b169/packages/babel-parser/test/fixtures/v8intrinsic/_errors/not-in-call-expression/options.json
// %DebugPrint?.(null)

new %DebugPrint(null);

function *foo() {
  yield %StringParseInt(\\"42\\", 10)
}

foo%bar()
",
  "plugins": "[
  [
    [
      \\"functionBind\\",
      {}
    ],
    [
      \\"v8intrinsic\\",
      {}
    ],
    [
      \\"partialApplication\\",
      {}
    ]
  ]
]",
}
`;
